<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [

<!-- =========================================================================
Useful entities
========================================================================== -->

<!-- ========== Acronyms and abbreviations ========== -->

<!ENTITY api   "<acronym>API</acronym>">
<!ENTITY crc   "<acronym>CRC</acronym>">
<!ENTITY ieee  "<acronym>IEEE</acronym>">
<!ENTITY iss   "<acronym>ISS</acronym>">
<!ENTITY jtag  "<acronym>JTAG</acronym>">
<!ENTITY osci  "<acronym>OSCI</acronym>">
<!ENTITY pdf   "<acronym>PDF</acronym>">
<!ENTITY rtl   "<acronym>RTL</acronym>">
<!ENTITY soc   "<acronym>SoC</acronym>">
<!ENTITY tap   "<acronym>TAP</acronym>">
<!ENTITY tlm   "<acronym>TLM</acronym>">
<!ENTITY vcd   "<acronym>VCD</acronym>">

<!-- ========== commonly used things ========== -->

<!ENTITY systemc "SystemC">
<!ENTITY tck     "<literal>TCK</literal>">
<!ENTITY tdi     "<literal>TDI</literal>">
<!ENTITY tdo     "<literal>TDO</literal>">
<!ENTITY tms     "<literal>TMS</literal>">
<!ENTITY trst    "<literal>TRST</literal>">

<!-- ========== applications ========== -->

<!-- = software applications = -->

<!ENTITY gdb       "<application class='software'><acronym>GDB</acronym></application>">
<!ENTITY linux     "<application class='software'>Linux</application>">
<!ENTITY verilator "<application class='software'>Verilator</application>">

<!-- = Hardware applications = -->

<!ENTITY orpsoc    "<application class='hardware'>ORPSoC</application>">

<!-- = Commands = -->

<!-- = Libraries = -->

<!-- ========== Cross references ========== -->

<!-- = Organizations = -->

<!ENTITY embecosm "Embecosm">
<!ENTITY opencores "OpenCores">
<!ENTITY lgpl "GNU Lesser General Public License">

<!ENTITY embecosm_www "Embecosm (<ulink url='http://www.embecosm.com'>www.embecosm.com</ulink>)">
<!ENTITY opencores_www "OpenCores (<ulink
  url='http://www.opencores.org'>www.opencores.org</ulink>)">
<!ENTITY gpl_www "GNU General Public License (<ulink url='http://www.gnu.org/licenses/gpl.html'>GNU General Public License</ulink>)">

]>

<!-- ==========================================================================

Copyright (c) 2009 Embecosm Limited <info@embecosm.com>.

This work is licensed under the Creative Commons Attribution 2.0 UK:
England & Wales License. To view a copy of this license, visit
http://creativecommons.org/licenses/by/2.0/uk/ or send a letter to Creative
Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.
	
This license means you are free:
  - to copy, distribute, display, and perform the work
  - to make derivative works

under the following conditions:
  - ATTRIBUTION. You must give the original author, Embecosm, credit;
  - For any reuse or distribution, you must make clear to others the license
    terms of this work;
  - Any of these conditions can be waived if you get permission from the
    copyright holder, Embecosm; and
  - Nothing in this license impairs or restricts the author's moral rights.

===============================================================================

Application note describing a SystemC cycle accurate interface to JTAG

$Id$

=========================================================================== -->

<book lang="en_GB">
  <title>
    Cycle Accurate Modeling with Verilator
  </title>
  <subtitle>
    Tutorial Case Study Using the OpenRISC Reference Platform System-on-Chip
  </subtitle>

  <bookinfo>

    <author>
      <firstname>Jeremy</firstname>
      <surname>Bennett</surname>
    </author>

    <corpauthor>
      <ulink url="http://www.embecosm.com">&embecosm;</ulink>
    </corpauthor>

    <pubdate>
      February 2009
    </pubdate>

    <releaseinfo>
      Application Note 6. Issue 1
    </releaseinfo>

    <copyright>
      <year>
	2009
      </year>
      <holder>
	&embecosm; Limited
      </holder>
    </copyright>

    <legalnotice id="legalnotice">
      <title>
	Legal Notice
      </title>

      <para>
	This work is licensed under the Creative Commons Attribution 2.0 UK:
	England &amp; Wales License. To view a copy of this license, visit
	<ulink
	url="http://creativecommons.org/licenses/by/2.0/uk/">http://creativecommons.org/licenses/by/2.0/uk/</ulink>
	or send a letter to Creative Commons, 171 Second Street, Suite 300,
	San Francisco, California, 94105, USA.
      </para>
	
      <para>
	This license means you are free:
	<itemizedlist>
	  <listitem>
	    <para>
	      to copy, distribute, display, and perform the work
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      to make derivative works
	    </para>
	  </listitem>
	</itemizedlist>
	under the following conditions:
	<itemizedlist>
	  <listitem>
	    <para>
	      <emphasis>Attribution.</emphasis> You must give the original
	      author, Jeremy Bennett of &embecosm_www;, credit;
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      For any reuse or distribution, you must make clear to others the
	      license terms of this work;
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Any of these conditions can be waived if you get permission from
	      the copyright holder, &embecosm;; and
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Nothing in this license impairs or restricts the author's moral
	      rights.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>

      <para>
	The software for the &systemc; cycle accurate model written by
	&embecosm; and used in this document is licensed under the
	&gpl_www;. For detailed licensing information see the file
	<filename>COPYING</filename> in the source code.
      </para>

      <para>
	&embecosm; is the business name of &embecosm; Limited, a private
	limited company registered in England and Wales. Registration number
	6577021.
      </para>

    </legalnotice>
  </bookinfo>

  <chapter>
    <title>
      Introduction
    </title>

    <para>
      This document describes how to use &verilator; <xref
      linkend="ref_verilator"/> to create a cycle accurate &systemc; model of
      a complete System-on-Chip.  &jtag; (IEEE 1149.1), generated
      automatically from the Verilog RTL.
    </para>

    <para>
      Cycle accurate models in C and &systemc; are becoming and increasingly
      important part of the verification process, particularly for SoCs with
      performance critical embedded software. They represent a software
      friendly compromise, offering higher performance than traditional
      event-driven simulation, but greater accuracy that hand-written
      instruction set simulators (&iss;) and transaction level models (&tlm;).
    </para>

    <para>
      Typically such models follow 2-state, zero-delay synthesis semantics,
      offering an early insight into the behavior of the synthesized
      design. Applications include:
    </para>

    <itemizedlist>
      <listitem>
	<para>
          Detailed performance analysis of systems, based on the actual
          hardware implementation running with its embedded software.
	</para>
      </listitem>

      <listitem>
	<para>
          Implementation of low level firmware, such as board support packages
	  codecs and specialist device drivers, which rely on exact behavior
	  of SoC peripherals.
	</para>
      </listitem>

      <listitem>
	<para>
	  Software optimization. This can be particularly important for codec
	  development, where the performance depends critically on interaction
	  between processor, memory, cache and MMU. In such scenarios,
	  estimates by &iss; and &tlm; can be out by a factor of 3, resulting
	  either in wasted silicon, or chips that cannot meet their required
	  performance.
	</para>
      </listitem>

    </itemizedlist>

    <sect1>
      <title>
	Target Audience
      </title>

      <para>
	If you are new to cycle accurate modeling, then this application note
	provides a hands-on introduction. While based on the open source tool,
	&verilator;, the techniques described are equally applicable to
	commercial tools such as ARC VTOC or Carbon Design Systems Model
	Studio.
      </para>

    </sect1>

    <sect1>
      <title>
	Further Sources of Information
      </title>

      <sect2>
	<title>
	  Written Documentation
	</title>

	<para>
          &verilator; has its own website (<ulink
          url="http://www.veripool.org">www.veripool.org</ulink>), providing
          guidance for downloading, installing and using the tool. In
          particular this application note should be read in conjunction with
          the &verilator; user guide.
        </para>

	<para>
	  &systemc; is &ieee; standard 1666, and the standardization documents
	  are the ultimate reference. The &systemc; standard <xref
	  linkend="ref_ieee_systemc"/> is a free &pdf; download (a novelty for
	  the &ieee;).
	</para>

	<para>
	  The files making up the examples used in this application noted are
	  comprehensively commented, and can be processed with Doxygen <xref
	  linkend="ref_doxygen" />. Each class, member and method's behavior,
	  parameters and return value is described.
	</para>
	<indexterm>
	  <primary>Doxygen</primary>
	</indexterm>
    
      </sect2>

      <sect2>
	<title>
	  Other Information Channels
	</title>

	<para>
	  There is a wealth of material to support &systemc; on the Internet.
	</para>

	<para>
	  The Open &systemc; Initiative (&osci;) provides an open source
	  reference implementation of the &systemc; library, which includes
	  tutorial material in its documentation directory. These may be
	  accessed from the &osci; website (<ulink
	  url="http://www.systemc.org">www.systemc.org</ulink>).
	</para>

	<para>
	  &osci; also provide a number of public mailing lists. The help forum
	  and the community forum are of particular relevance. Subscription is
	  through the &osci; website (see above).
	</para>

      </sect2>

    </sect1>

    <sect1>
      <title>
	About &embecosm;
      </title>

      <para>
	&embecosm; is a consultancy specializing in open source tools, models
	and training for the embedded software community. All &embecosm;
	products are freely available under open source licenses.
      </para>
      <indexterm>
	<primary>&embecosm;</primary>
      </indexterm>

      <para>
	&embecosm; offers a range of commercial services:
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    Customization of open source tools and software, including porting
	    to new architectures.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Support, tutorials and training for open source tools and software.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Custom software development for the embedded market, including
	    bespoke software models of hardware.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Independent evaluation of software tools.
	  </para>
	</listitem>
      </itemizedlist>

      <para>
	For further information, visit the &embecosm; website at <ulink
	url="http://www.embecosm.com/">www.embecosm.com</ulink>.
      </para>

    </sect1>

  </chapter>

  <chapter id="chap_overview">
    <title>
      Overview of Technologies and Tools
    </title>

    <sect1>
      <title>
	Cycle Accurate Modeling
      </title>

      <para>
	Cycle accurate models provide an accurate description of the state of
	the model on each clock cycle. As such they represent a mid-point
	between traditional event driven simulation (providing detail within
	the clock cycle) and high level transaction models (providing details
	of bus transactions, but usually only approximate estimates of the
	cycle count).
      </para>

      <para>
	Cycle accurate models are of particular value, because they
	reflect the level of detail seen by a software engineer using a
	chip. The software engineer generally cannot see what is happening
	within clock cycles.
      </para>

      <sect2>
	<title>
	  Level of Modeling Detail
	</title>

	<para>
	  There is some variation in the level of detail shown with specific
	  modeling techniques. For example cycle accurate models generated by
	  ARC VTOC from Verilog RTL will show the state of every state holding
	  register in the model on each clock edge, and any asynchronous
	  signal edge. Hand-written cycle accurate models within ARM SoC
	  Designer will typically only show the state on the active edge of
	  the clock cycle, and that state will be restricted to the external
	  ports and defined internal registers.
	</para>

	<para>
	  Most cycle accurate models follow 2-state, zero delay synthesis
	  semantics. In this way they are closer to the behavior of the actual
	  chip than traditional 4-state event-driven simulation. However there
	  is no absolute reason why cycle-accurate models could not follow
	  4-state simulation semantics.
	</para>

      </sect2>

      <sect2>
	<title>
	  Tool Support
	</title>

	<para>
	  Some cycle accurate models are written by hand&mdash;for example the
	  cycle accurate models supplied by ARM for their processor
	  cores. However the great majority of cycle accurate models are
	  generated automatically from Verilog or VHDL RTL. There are two
	  commercial products (ARC VTOC and Carbon Design Systems ModelStudio)
	  and one free open source product (Verilator).
	</para>

      </sect2>

      <sect2>
	<title>
	  Modeling Language
	</title>

	<para>
	  All these tools generate models in C/C++. However &systemc; is
	  becoming increasingly popular, and is generated by all the tools as
	  well. However the reference &osci; &systemc; simulator carries a
	  serious performance penalty, and in all cases the model is a &systemc;
	  wrapper for the top level ports around a plain C/C++ model.
	</para>

	<para>
	  The performance penalty of &systemc; wrappers should be a
	  consideration when generating cycle accurate models. It is
	  particularly bad if there are any ports of more than 64-bits. The
	  reference &systemc; simulator has a very low-performance
	  implementation of such ports.
	</para>

      </sect2>

    </sect1>

    <sect1>
      <title>
	&osci; &systemc; IEEE 1666
      </title>

      <para>
	The development of &systemc; as a standard for modeling hardware
	started in 1996. Version 2.0 of the proposed standard was released by
	the Open &systemc; Initiative (&osci;) in 2002. In 2006, &systemc;
	became IEEE standard 1666-2005 <xref linkend="ref_ieee_systemc" />.
      </para>

      <para>
	Most software languages are not particularly suited to modeling
	hardware systems<footnote>
	  <para>
	    There are some exceptions, most notably Simula67, one of the
	    languages which inspired C++. In some respects it is remarkably
	    like &systemc;.
	  </para>
	</footnote>. <firstterm>&systemc;</firstterm> was developed to provide
	features that facilitate hardware modeling, particularly the
	parallelism of hardware, in a mainstream programming
	language.
      </para>

      <para>
	An important objective was that software engineers should be
	comfortable with using &systemc;, even though it is a hardware
	modeling language. Rather than invent a new language, &systemc; is
	based on the existing C++ language. &systemc; is a true super-set of
	C++, so any C++ program is automatically a valid &systemc; program.
      </para>

      <para>
	&systemc; uses the template, macro and library features of C++ to
	extend the language. The key features it provides are:
      </para>

      <itemizedlist>

	<listitem>
	  <para>
	    A C++ class, <classname>sc_module</classname>, suitable for
	    defining hardware modules containing parallel
	    processes.
	  </para>

	  <note>
	    <para>
	      <emphasis>Process</emphasis> is a general term in &systemc;
	      to describe the various ways of representing parallel flows
	      of control. It has nothing to do with processes in the &linux;
	      or Microsoft Windows operating systems.
	    </para>
	  </note>
	</listitem>

	<listitem>
	  <para>
	    A mechanism to define functions modeling the parallel
	    threads of control within <classname>sc_module</classname>
	    classes;
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Two classes, <classname>sc_port</classname> and
	    <classname>sc_export</classname> to represent points of
	    connection to and from a <classname>sc_module</classname>;
	  </para>
	</listitem>

	<listitem>
	  <para>
	    A class, <classname>sc_interface</classname> to describe the
	    software services required by a <classname>sc_port</classname>
	    or provided by a <classname>sc_export</classname>;
	  </para>
	</listitem>

	<listitem>
	  <para>
	    A class, <classname>sc_prim_channel</classname> to represent the
	    channel connecting ports;
	  </para>
	</listitem>

	<listitem>
	  <para>
	    A set of derived classes, of
	    <classname>sc_prim_channel</classname>,
	    <classname>sc_interface</classname>,
	    <classname>sc_port</classname> and
	    <classname>sc_export</classname> to represent and connect common
	    channel types used in hardware design such as signals, buffers and
	    FIFOs; and
	  </para>
	</listitem>

	<listitem>
	  <para>
	    A comprehensive set of types to represent data in both
	    <firstterm>2-state</firstterm> and <firstterm>4-state</firstterm>
	    logic.
	  </para>
	</listitem>
      </itemizedlist>

      <para>
	The full specification is 441 pages long <xref
	linkend="ref_ieee_systemc" />. The &osci; reference distribution
	includes a very useful introductory user guide and tutorial <xref
	linkend="ref_osci_systemc_ug" />.
      </para>
	
    </sect1>

    <sect1>
      <title>
	OpenCores and the OpenRISC Project
      </title>

      <para>
	The &or1k; project forms part of the OpenCores organization (<ulink
	url="http://www.opencores.org">www.opencores.org</ulink>). Its aim is
	to create a free open source computing platform, comprising:
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    An open source 32/64 bit RISC/DSP architecture;
	  </para>
	</listitem>
	
	<listitem>
	  <para>
	    A set of open source implementations of the architecture; and
	  </para>
	</listitem>
	
	<listitem>
	  <para>
	    A complete open source tool chain and operating system.
	  </para>
	</listitem>

      </itemizedlist>

      <para>
	The &or1k; project has resulted in Verilog for a 32-bit processor
	core, the &or1200; (sometimes known as <abbrev>OR1200</abbrev>) and a
	complete reference System on Chip (&soc;) design using that core,
	&orpsoc;.
      </para>

      <para>
	&or1k; is a traditional RISC load-store architcture. Optional operands
	for multiplication and division may be added and there are optional
	data and instruction caches and MMUs.
      </para>

      <para>
	A particularly useful feature is the <literal>l.nop</literal>
	opcode. This takes an optional 16-bit constant operand, which is
	placed in the low 16-bits of the instruction word. This field has no
	impact on the execution of the instruction, but may be analysed as
	required by external test benches.
      </para>

      <sect2>
	<title>
	  The OpenRISC Reference Platform System-on-Chip (&orpsoc;)
	</title>

	<para>
	  &orpsoc; is a complete SoC based on the OpenRISC 1000. It combines
	  the processor with SRAM and flash memory and a range of peripherals
	  as shown in <xref linkend="fig_orpsoc"/>.
	</para>

	<figure id="fig_orpsoc">
	  <title>
	    The OpenRISC Reference Platform System-on-Chip (&orspoc;).
	  </title>

	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="orpsoc.svg"
			 format="SVG"
			 width="14cm"
			 scalefit="1"
			 align="center" />
	    </imageobject>
	    <imageobject>
	      <imagedata fileref="orpsoc.png"
			 format="PNG"
			 width="80%"
			 scalefit="1"
			 align="center" />
	    </imageobject>
	  </mediaobject>
	</figure>

	<para>
	  The full design is around 150k gates + memories. It runs on standard
	  Altera and Xilinx FPGA boards and is also available commercially
	  from Flextronics.
	</para>

      </sect2>

    </sect1>

    <sect1>
      <title>
        Icarus Verilog
      </title>

      <para>
	Icarus Verilog <xref linkend="ref_icarus_verilog"/> is an open source
	event driven simulator, offering an interface and behaviour similar to
	commercial offerings such as Cadence NC, Synopsys VCS and Mentor
	Graphics ModelSim.
      </para>

      <para>
	When developing cycle accurate models, it is important to compare
	behavior with event driven simulation, to understand any differences,
	and ensure they are not significant.
      </para>

      <para>
	Icarus Verilog is capable of simulating &orpsoc; at 1-2kHz on a
	standard PC running Linux.
      </para>

    </sect1>

    <sect1>
      <title>
        Verilator
      </title>

      <para>
	Verilator <xref linkend="ref_verilator"/> is an open source tool which
	generates cycle accurate C++ and SystemC models from synthesizable
	Verilog RTL. The model follow 2-state, zero delay, synthesizable
	semantics. Experimental versions are also able to process VHDL.
      </para>

      <para>
	The functionality is similar to commercial offerings from ARC (VTOC)
	and Carbon Design Systems (Model Studio).
      </para>

      <para>
	A verilator SystemC model of ORPSoC simulates at around 50kHz on a
	standard PC running Linux.
      </para>

    </sect1>

  </chapter>

  <chapter>
    <title>
      The Example Design
    </title>

    <para>
      The demonstration system is based on a fully configured &orpsoc; with
      data and instruction caches, data and instruction MMU's, multiply and
      divide instrutions, 2MB Flash and 2MB SRAM. SRAM and all other memories
      are implemented as generic flip-flop memory. Flash memory is modeled as
      generic SRAM initialized from a file.
    </para>

  </chapter>

  <chapter id="chap_simulation">
    <title>
      Baseline Simulation
    </title>

    <para>
    </para>

  </chapter>

  <chapter id="chap_verilator">
    <title>
      Building the Verilator Model
    </title>

    <para>
    </para>

  </chapter>

  <chapter>
    <title>
      The &systemc; Test Bench
    </title>

    <para>
    </para>

  </chapter>

  <chapter id="chap_optimization">
    <title>
      Optimizing the Verilator Model
    </title>

    <para>
    </para>

  </chapter>

  <chapter>
    <title>
      Summary
    </title>

    <para>
      This application note presents a &systemc; interface suitable for cycle
      accurate modeling of &jtag;. It will be of value to engineers developing
      cycle accurate models, who need to interface to other modules, to
      develop test benches, or to connect to tools such as debuggers.
    </para>

    <para>
      Suggestions for corrections or improvements are welcomed. Please contact
      the author at <ulink
      url="mailto:jeremy.bennett@embecosm.com"><literal>jeremy.bennett@embecosm.com</literal></ulink>.
    </para>

  </chapter>

  <glossary id="sec_glossary">
    <title>
      Glossary
    </title>

    <glossentry>
      <glossterm>2-state</glossterm>
      <glossdef>
	<para>
	  Hardware logic model which is based only on logic high and logic low
	  (binary 0 and binary 1) values.
	</para>

	<glossseealso>4-state</glossseealso>
      </glossdef>
    </glossentry>

    <glossentry>
      <glossterm>4-state</glossterm>
      <glossdef>
	<para>
	  Hardware logic model which considers unknown (<literal>X</literal>)
	  and unproven (<literal>Z</literal>) values as well as logic high and
	  logic low (binary 0 and binary 1).
	</para>

	<glossseealso>2-state</glossseealso>
      </glossdef>
    </glossentry>

    <glossentry>
      <glossterm>big&#32;endian</glossterm>
      <glossdef>
	<para>
	  A description of the relationship between byte and word addressing
	  on a computer architecture. In a big endian architecture, the
	  least significant byte in a data word resides at the highest
	  byte address (of the bytes in the word) in memory.
	</para>
	<indexterm>
	  <primary>endianism</primary>
	</indexterm>

	<para>
	  The alternative is little endian addressing.
	</para>

	<glossseealso>little&#32;endian</glossseealso>
      </glossdef>
    </glossentry>

    <glossentry>
      <glossterm>Joint Test Action Group</glossterm>
      <acronym>JTAG</acronym>
      <glossdef>
	<para>
	  &jtag; is the usual name used for the IEEE 1149.1 standard entitled
	  <emphasis>Standard Test Access Port and Boundary-Scan
	  Architecture</emphasis> for test access ports used for testing
	  printed circuit boards and chips using boundary scan.
	</para>
	<indexterm>
	  <primary>&jtag;</primary>
	</indexterm>

	<para>
	  This standard allows external reading of state within the board or
	  chip. It is thus a natural mechanism for debuggers to connect to
	  embedded systems.
	</para>
      </glossdef>
    </glossentry>

    <glossentry>
      <glossterm>little&#32;endian</glossterm>
      <glossdef>
	<para>
	  A description of the relationship between byte and word addressing
	  on a computer architecture. In a little endian architecture, the
	  least significant byte in a data word resides at the lowest
	  byte address (of the bytes in the word) in memory.
	</para>
	<indexterm>
	  <primary>endianism</primary>
	</indexterm>

	<para>
	  The alternative is big endian addressing.
	</para>

	<glossseealso>big&#32;endian</glossseealso>
      </glossdef>
    </glossentry>

    <glossentry>
      <glossterm>Open &systemc; Initiative</glossterm>
      <acronym>OSCI</acronym>
      <glossdef>
	<para>
	  The industry standardization body for &systemc;/
	</para>
      </glossdef>
    </glossentry>

    <glossentry>
      <glossterm>System on Chip</glossterm>
      <acronym>SoC</acronym>
      <glossdef>
	<para>
	  A silicon chip which includes one or more processor cores.
	</para>
      </glossdef>
    </glossentry>

    <glossentry>
      <glossterm>&systemc;</glossterm>
      <glossdef>
	<para>
	  A set of libraries and macros, which extend the C++ programming
	  language to facilitate modeling of hardware.
	</para>

	<para>
	  Standardized by the <glossterm>Open &systemc; Initiative</glossterm>,
	  who provide an open source reference implementation.
	</para>

	<glossseealso>Open&#32;&systemc;&#32;Initiative</glossseealso>
      </glossdef>
    </glossentry>

    <glossentry>
      <glossterm>Test Access Port</glossterm>
      <acronym>TAP</acronym>
      <glossdef>
	<para>
	  The interface to a &jtag; interface defined by IEEE 1149.1.
	</para>
      </glossdef>
    </glossentry>

  </glossary>      

  <bibliography>
    <title>
      References
    </title>

    <bibliomixed id="ref_doxygen">
      <title id="ref_gdb_doxygen_xr">
	Doxygen: Source code documentation generator tool,
      </title>
      <firstname>Dimitri</firstname> <surname>van Heesch</surname>,
      <pubdate>
	2008
      </pubdate>.
      <bibliosource class="uri">
	<ulink
	    url="http://www.doxygen.org"/>
      </bibliosource>
      <indexterm>
	<primary>Doxygen</primary>
      </indexterm>
    </bibliomixed>

    <bibliomixed id="ref_esp4">
      <title id="ref_app_note_2_xr">
	&embecosm; Software Package 4. Cycle Accurate &systemc; &jtag;
	Interface: Reference Implementation.
      </title>
      <publisher>
	<publishername>
	  Embecosm Limited,
	</publishername>
      </publisher>
      <pubdate>
	January 2009.
      </pubdate>
      Available for free download from the &embecosm; website at
      <bibliosource class="uri">
	<ulink url="http://www.embecosm.com">www.embecosm.com</ulink>
      </bibliosource>.
    </bibliomixed>

    <bibliomixed id="ref_icarus_verilog">
      <title>
	Icarus Verilog 0.9
      </title>
      <firstname>Steve</firstname> <surname>Williams</surname>,
      <pubdate>
	January 2009.
      </pubdate>
      <publisher>
	<publishername>
	  Icarus Verilog
	</publishername>
      </publisher>
      <bibliosource class="uri">
	<ulink url="http://www.veripool.org/wiki/verilator">www.veripool.org/wiki/verilator</ulink>
      </bibliosource>
    </bibliomixed>

    <bibliomixed id="ref_ieee_systemc">
      <title>
	IEEE Standard &systemc;&reg; Language:
      </title>
      <subtitle>
	Reference Manual.
      </subtitle>
      <publisher>
	<publishername>
	  IEEE Computer Society
	</publishername>
      </publisher>
      <pubdate>
	2005
      </pubdate>.
      <biblioid class="pubnumber">
	IEEE Std 1666&trade;-2005.
      </biblioid>
      Available for free download from
      <bibliosource class="uri">
	<ulink
	    url="http://standards.ieee.org/getieee/1666/index.html">standards.ieee.org/getieee/1666/index.html</ulink>
      </bibliosource>.
    </bibliomixed>

    <bibliomixed id="ref_orpsoc">
      <title>
	The OpenRISC Reference Platform System-on-Chip
      </title>
      <publisher>
	<publishername>
	  ORSoC AB (through the OpenCores website)
	</publishername>
      </publisher>
      <bibliosource class="uri">
	<ulink url="http://www.opencores.org">www.opencores.org</ulink>
      </bibliosource>
    </bibliomixed>

    <bibliomixed id="ref_osci_systemc_ug">
      <title>
	&systemc; Version 2.0 User Guide.
      </title>
      <publisher>
	<publishername>
	  Open &systemc; Initiative,
	</publishername>
      </publisher>
      <pubdate>
	2002.
      </pubdate>
    </bibliomixed>

    <bibliomixed id="ref_verilator">
      <title>
	Verilator 3.700.
      </title>
      <firstname>Wilson</firstname> <surname>Snyder</surname>,
      <pubdate>
	January 2009.
      </pubdate>
      <publisher>
	<publishername>
	  Veripool,
	</publishername>
      </publisher>
      <bibliosource class="uri">
	<ulink url="http://www.veripool.org/wiki/verilator">www.veripool.org/wiki/verilator</ulink>
      </bibliosource>
    </bibliomixed>

  </bibliography>

</book>
