<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" 
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [

<!-- ==========================================================================
Useful entities
=========================================================================== -->

<!-- ========== Acronyms ========== -->

<!ENTITY iss  "<acronym>ISS</acronym>">
<!ENTITY jtag "<acronym>JTAG</acronym>">
<!ENTITY rsp  "<acronym>RSP</acronym>">
<!ENTITY soc  "<acronym>SoC</acronym>">
<!ENTITY uart "<acronym>UART</acronym>">

<!-- ========== Applications ========== -->

<!-- ===== Software applications ===== -->

<!ENTITY binutils "binutils">
<!ENTITY cvs      "<acronym>CVS</acronym>" >
<!ENTITY ddd      "<acronym>DDD</acronym>" >
<!ENTITY gcc      "<acronym>GCC</acronym>">
<!ENTITY gdb      "<acronym>GDB</acronym>">
<!ENTITY linux    "Linux">
<!ENTITY uclinux  "uClinux" >
<!ENTITY uclibc   "uClibc">
<!ENTITY or1ksim  "Or1ksim">

<!-- ===== Hardware applications ===== -->

<!ENTITY or1k   "OpenRISC&nbsp;1000">
<!ENTITY or1200 "OpenRISC&nbsp;1200">
<!ENTITY orpsoc "ORPSoC">
<!ENTITY usb    "<acronym>USB</acronym>">

<!-- ===== Commands ===== -->

<!ENTITY patch       "<command>patch</command>" >
<!ENTITY diff        "<command>diff</command>" >
<!ENTITY configure   "<command>configure</command>" >
<!ENTITY make        "<command>make</command>" >
<!ENTITY makefile    "<command>make</command> file" >
<!ENTITY makeall     "<command>make&nbsp;all</command>" >
<!ENTITY makecheck   "<command>make&nbsp;check</command>" >
<!ENTITY makeinstall "<command>make&nbsp;install</command>" >
<!ENTITY makeclean   "<command>make&nbsp;clean</command>" >
<!ENTITY xterm       "<command>xterm</command>" >
<!ENTITY sh          "<command>sh</command>" >
<!ENTITY bash        "<command>bash</command>" >
<!ENTITY csh         "<command>csh</command>" >
<!ENTITY tcsh        "<command>tcsh</command>" >

<!-- ===== Libraries ===== -->

<!ENTITY stdio "<systemitem class='library'>stdio</systemitem>" >

<!-- ========== Cross references ========== -->

<!-- ===== Internal cross references ===== -->

<!ENTITY patchref "See <xref linkend='sec_binutils_download' /> for an example
  of how to apply a patch file." >

<!-- ===== Organizations and Web pages ===== -->

<!ENTITY embecosm "Embecosm">
<!ENTITY opencores "OpenCores">

<!ENTITY gnu "<acronym>GNU</acronym>">
<!ENTITY mof "<acronym>MOF</acronym>">

<!ENTITY embecosm_www "Embecosm (<ulink url='http://www.embecosm.com'>www.embecosm.com</ulink>)">

<!ENTITY busybox "<ulink url='http://www.busybox.net'>BusyBox</ulink>" >

]>

<!-- ==========================================================================

                  CONFIDENTIAL AND PROPRIETARY INFORMATION
                  ========================================

Copyright (c) 2008 Embecosm.

This work is licensed under the Creative Commons Attribution 2.0 UK:
England & Wales License. To view a copy of this license, visit
http://creativecommons.org/licenses/by/2.0/uk/ or send a letter to Creative
Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.
	
This license means you are free:
  - to copy, distribute, display, and perform the work
  - to make derivative works

under the following conditions:
  - ATTRIBUTION. You must give the original author, Embecosm, credit;
  - For any reuse or distribution, you must make clear to others the license
    terms of this work;
  - Any of these conditions can be waived if you get permission from the
    copyright holder, Embecosm; and
  - Nothing in this license impairs or restricts the author's moral rights.

===============================================================================

Application note describing the deployment of the Opencores simulator and
toolchain.

$Id$

=========================================================================== -->

<book lang="en_GB">
  <title>
    The &opencores; &or1k; Simulator and Tool Chain
  </title>
  <subtitle>
    Installation Guide
  </subtitle>

  <bookinfo>

    <author>
      <firstname>Jeremy</firstname>
      <surname>Bennett</surname>
    </author>

    <corpauthor>
      <ulink url="http://www.embecosm.com">&embecosm;</ulink>
    </corpauthor>

    <pubdate>
      November 2008
    </pubdate>

    <releaseinfo>
      Application Note 2. Issue 3
    </releaseinfo>

    <copyright>
      <year>
	2008
      </year>
      <holder>
	&embecosm; Limited
      </holder>
    </copyright>

    <legalnotice id="legalnotice">
      <title>
	Legal Notice
      </title>

      <para>
	This work is licensed under the Creative Commons Attribution 2.0 UK:
	England &amp; Wales License. To view a copy of this license, visit
	<ulink
	url="http://creativecommons.org/licenses/by/2.0/uk/">http://creativecommons.org/licenses/by/2.0/uk/</ulink>
	or send a letter to Creative Commons, 171 Second Street, Suite 300,
	San Francisco, California, 94105, USA.
      </para>

      <para>
	This license means you are free:
	<itemizedlist>
	  <listitem>
	    <para>
	      to copy, distribute, display, and perform the work
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      to make derivative works
	    </para>
	  </listitem>
	</itemizedlist>
	under the following conditions:
	<itemizedlist>
	  <listitem>
	    <para>
	      <emphasis>Attribution.</emphasis> You must give the original
	      author, Jeremy Bennett of &embecosm_www;, credit;
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      For any reuse or distribution, you must make clear to others the
	      license terms of this work;
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Any of these conditions can be waived if you get permission from
	      the copyright holder, &embecosm;; and
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Nothing in this license impairs or restricts the author's moral
	      rights.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>

      <para>
	&embecosm; is the business name of &embecosm; Limited, a private
	limited company registered in England and Wales. Registration number
	6577021.
      </para>

    </legalnotice>

  </bookinfo>
      
  <chapter>
    <title>
      Introduction
    </title>

    <para>
      Many of the other application notes and technical papers written by
      &embecosm; make use of the &opencores; &or1k; simulator and tool chain
      in examples. Since these systems are made available under open source
      licenses, they are a convenient base for examples that can be used
      freely.
    </para>
    <indexterm>
      <primary>&embecosm;</primary>
      <secondary>application notes</secondary>
    </indexterm>

    <para>
      This application note supports these existing application notes and
      technical papers by documenting how the &or1k; &or1ksim; architecture
      and its associated tool chain should be installed. It also provides
      examples of the simulator and tool chain in use, including a recent
      &linux; kernel.
    </para>

    <para>
      Issue 3 of this application note is updated to use release 2.0 of the
      port of &gdb;&nbsp;6.8 and Linux kernel version 2.6.23. A number of
      clarifications have been added in the light of user feedback on issues 1
      and 2.
    </para>

    <sect1>
      <title>
	About &embecosm;
      </title>

      <para>
	&embecosm; is a consultancy specializing in open source tools, models
	and training for the embedded software community. All &embecosm;
	products are freely available under open source licenses.
      </para>
      <indexterm>
	<primary>&embecosm;</primary>
      </indexterm>

      <para>
	&embecosm; offers a range of commercial services.
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    Customization of open source tools and software, including porting
	    to new architectures.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Support, tutorials and training for open source tools and software.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Custom software development for the embedded market, including
	    bespoke software models of hardware.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Independent evaluation of software tools.
	  </para>
	</listitem>
      </itemizedlist>

      <para>
	For further information, visit the &embecosm; website at <ulink
	url="http://www.embecosm.com/">www.embecosm.com</ulink>.
      </para>

    </sect1>

  </chapter>

  <chapter>
    <title>
      About &or1k;
    </title>

    <para>
      The &or1k; project forms part of the OpenCores organization (<ulink
      url="http://www.opencores.org">www.opencores.org</ulink>). Its aim is to
      create a free open source computing platform, comprising:
    </para>
    <indexterm>
      <primary>&opencores;</primary>
    </indexterm>
    <indexterm>
      <primary>&or1k;</primary>
      <secondary>key features</secondary>
    </indexterm>

    <itemizedlist>

      <listitem>
	<para>
	  An open source 32/64 bit RISC/DSP architecture;
	</para>
      </listitem>

      <listitem>
	<para>
	  A set of open source implementations of the architecture; and
	</para>
      </listitem>

      <listitem>
	<para>
	  A complete open source tool chain and operating system.
	</para>
      </listitem>

    </itemizedlist>

    <para>
      The &or1k; project has resulted in Verilog for a 32 processor core, the
      &or1200; (sometimes known as <abbrev>OR1200</abbrev>) and a complete
      reference System on Chip (&soc;) design using that core,
      &orpsoc;.
    </para>
    <indexterm>
      <primary>&or1200;</primary>
    </indexterm>
    <indexterm>
      <primary>&orpsoc;</primary>
    </indexterm>

    <sect1>
      <title>
	Obtaining the &or1k; Tool Chain
      </title>

      <para>
	The &opencores; website provides three mechanisms for obtaining the
	tool chain.
      </para>
      <indexterm>
	<primary>obtaining the tool chain</primary>
      </indexterm>

      <orderedlist>
	<listitem>
	  <para>
	    The simplest method is to use a virtual Ubuntu image running under
	    VMware. Details of this can be found at <ulink
	    url="http://www.opencores.org/projects.cgi/web/or1k/vmware_image">www.opencores.org/projects.cgi/web/or1k/vmware_image</ulink>.
	  </para>
	  <indexterm>
	    <primary>obtaining the tool chain</primary>
	    <secondary>virtual Ubuntu image</secondary>
	  </indexterm>
	</listitem>

	<listitem>
	  <para>
	    To install the tools native on a Linux platform, &opencores;
	    provides a script, which will download, patch, build and install
	    all the tools. Details of this can be found at <ulink
	    url="http://www.opencores.org/projects.cgi/web/or1k/gnu_toolchain_port">www.opencores.org/projects.cgi/web/or1k/gnu_toolchain_port</ulink>.
	  </para>
	  <indexterm>
	    <primary>obtaining the tool chain</primary>
	    <secondary>automated script</secondary>
	  </indexterm>
	</listitem>

	<listitem>
	  <para>
	    Finally there are a set of basic instructions for building the
	    individual tools. These are somewhat out of date and consigned to
	    a legacy web page (see <ulink
	    url="http://www.opencores.org/projects.cgi/web/or1k/gnu_toolchain_port_old">www.opencores.org/projects.cgi/web/or1k/gnu_toolchain_port_old</ulink>). These
	    can be slightly out-of-date, and are usefully supplemented by Rich
	    D'Addio's <ulink
	    url="http://www.meansoffreedom.com/">Meansoffreedom
	    (&mof;)</ulink> website.
	  </para>
	  <indexterm>
	    <primary>obtaining the tool chain</primary>
	    <secondary>legacy instructions</secondary>
	  </indexterm>
	</listitem>
      </orderedlist>
      
      <para>
	This application note recognizes that a virtual image or a
	pre-packaged script may not provide the detailed control over tools,
	or access to the latest versions required by some users. It brings
	together the legacy instructions from the OpenCores website with the
	extensions from &mof; and updates them for 2008.
      </para>

      <para>
	The precise details vary depending on the environment used. The
	examples given below were all verified on a workstation using &gcc;
	4.3.0 under Fedora 9 &linux;. The procedure should be very similar
	under other &linux; versions.
      </para>

    </sect1>

    <sect1>
      <title>
	Components of the OpenRISC 1000 Tool Chain
      </title>

      <para>
	This application note describes several components of the OpenRISC 1000
	project:
      </para>
      <indexterm>
	<primary>tool chain</primary>
	<secondary>components</secondary>
      </indexterm>

      <itemizedlist>

	<listitem>
	  <para>
	    &gnu; &binutils;, &gcc; and &gdb; from the &gnu; tool chain port;
	  </para>
	</listitem>

	<listitem>
	  <para>
	    the &linux; kernel;
	  </para>
	</listitem>

	<listitem>
	  <para>
	    the &uclibc; library and
	  </para>
	</listitem>

	<listitem>
	  <para>
	    the &or1ksim; architectural simulator.
	  </para>
	</listitem>

      </itemizedlist>

      <note>
	<para>
	  The &gnu; tool chain (&binutils;, &gcc;, &gdb;) is built for a
	  <emphasis>cross-compiling</emphasis> environment. In other words the
	  tools are designed to run on the development workstation, but
	  generate code for the target (&or1200;) architecture.
	</para>
      </note>

    </sect1>

    <sect1 id="sec_locations">
      <title>
	Locations of Source and Patches
      </title>

      <para>
	Each tool in the tool chain is built from its source code. In all
	cases the source code is derived from the standard source code by
	patching with changes required for OpenRISC 1000. So for each tool
	there will be one source distribution to download (typically as a
	compressed tar file) and one or more patch files (typically
	compressed).
      </para>
      <indexterm>
	<primary>download locations</primary>
      </indexterm>
      <indexterm>
	<primary>source locations</primary>
      </indexterm>
      <indexterm>
	<primary>patch locations</primary>
      </indexterm>

      <para>
	Locations of the patch files for each tool are noted here. Where more
	than one location is given for the same item, they represent
	alternative download points for the same file.
      </para>

      <note>
	<para>
	  Some of these are FTP sites and some HTTP site. All should be
	  accessible through a web browser using the link shown. Downloads
	  from the &opencores; website requires a login (which is free). Some
	  other downloads may require login and password, which are given in
	  the table.
	</para>
      </note>

      <informaltable frame="all">
	<tgroup cols="3" align="left" colsep="1" rowsep="1">
	  <colspec colwidth="2*" colname="tool"/>
	  <colspec colwidth="4*" colname="item"/>
	  <colspec colwidth="10*" colname="location"/>
	  <thead>
	    <row>
	      <entry align="left">
		<para>
		  Tool
		</para>
	      </entry>
	      <entry align="left">
		<para>
		  Item
		</para>
	      </entry>
	      <entry align="left">
		<para>
		  Location
		</para>
	      </entry>
	    </row>
	  </thead>
	  <tbody>

	    <!-- binutils -->

	    <row>
	      <entry morerows="1" valign="middle">
		<para>
		  &binutils;
		</para>
	      </entry>
	      <entry>
		<para>
		  Distribution
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="http://ftp.gnu.org/gnu/binutils/binutils-2.16.1.tar.bz2">
		    http://ftp.gnu.org/gnu/binutils/binutils-2.16.1.tar.bz2
		  </ulink>
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para>
		  &mof; patch for &or1k;
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="http://www.meansoffreedom.com/binutils_2.16.1_unified.diff_rgd_fixed.bz2">
		    http://www.meansoffreedom.com/binutils_2.16.1_unified.diff_rgd_fixed.bz2
		  </ulink>
		</para>
	      </entry>
	    </row>

	    <!-- gcc -->

	    <row>
	      <entry morerows="1" valign="middle">
		<para>
		  &gcc;
		</para>
	      </entry>
	      <entry>
		<para>
		  Distribution
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="http://ftp.gnu.org/gnu/gcc/gcc-3.4.4/gcc-3.4.4.tar.bz2">
		    http://ftp.gnu.org/gnu/gcc/gcc-3.4.4/gcc-3.4.4.tar.bz2
		  </ulink>
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para>
		  &mof; patch for &or1k;
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="http://www.meansoffreedom.com/gcc-3.4.4-or32-unified.diff.bz2">
		    http://www.meansoffreedom.com/gcc-3.4.4-or32-unified.diff.bz2
		  </ulink>
		</para>
	      </entry>
	    </row>

	    <!-- gdb -->

	    <row>
	      <entry morerows="1" valign="middle">
		<para>
		  &gdb;
		</para>
	      </entry>
	      <entry>
		<para>
		  Distribution
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="http://ftp.gnu.org/gnu/gdb/gdb-6.8.tar.bz2">
		    http://ftp.gnu.org/gnu/gdb/gdb-6.8.tar.bz2
		  </ulink>
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para>
		  Patch for &or1k;
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="http://www.opencores.org/projects.cgi/web/or1k/or32-gdb-6.8-patch-2.0.bz2">
		    http://www.opencores.org/projects.cgi/web/or1k/or32-gdb-6.8-patch-2.0.bz2
		  </ulink>
		  (requires free OpenCores login)
		</para>
		<para>
		  <ulink
		      url="http://www.embecosm.com/packages/esp3/embecosm-esp3-or32-gdb-6.8-patch-2.0.bz2">
		    http://www.embecosm.com/packages/esp3/embecosm-esp3-or32-gdb-6.8-patch-2.0.bz2
		  </ulink>
		</para>
	      </entry>
	    </row>

	    <!-- Linux -->

	    <row>
	      <entry morerows="1" valign="middle">
		<para>
		  &linux;
		</para>
	      </entry>
	      <entry>
		<para>
		  Distribution
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="ftp://ftp.kernel.org/pub/linux/kernel/v2.6/linux-2.6.23.tar.bz2">
		    ftp://ftp.kernel.org/pub/linux/kernel/v2.6/linux-2.6.23.tar.bz2
		  </ulink>
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para>
		  &mof; patch for &or1k;
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="ftp://www.meansoffreedom.com/mof_orsoc/linux_2.6.23_or32_unified_simtested.bz2">
		    ftp://www.meansoffreedom.com/mof_orsoc/linux_2.6.23_or32_unified_simtested.bz2
		  </ulink>
		</para>
		<para>
		  Requires user name: <literal>download</literal>, password:
		  <literal>download</literal>.
		</para>
	      </entry>
	    </row>

	    <!-- uClibc -->

	    <row>
	      <entry morerows="4" valign="middle">
		<para>
		  &uclibc;
		</para>
	      </entry>
	      <entry>
		<para>
		  Distribution
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="http://www.uclibc.org/downloads/uClibc-0.9.28.3.tar.bz2">
		    http://www.uclibc.org/downloads/uClibc-0.9.28.3.tar.bz2
		  </ulink>
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para>
		  &mof; main patch for &or1k;
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="http://www.meansoffreedom.com/uClibc-0.9.28-or32-unified.bz2">
		    http://www.meansoffreedom.com/uClibc-0.9.28-or32-unified.bz2
		  </ulink>
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para>
		  &mof; supplementary patch for &or1k;
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="http://www.meansoffreedom.com/uClibc-0.9.28-or32-libc-support.bz2">
		    http://www.meansoffreedom.com/uClibc-0.9.28-or32-libc-support.bz2
		  </ulink>
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para>
		  &embecosm; patch for &or1k;
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="http://www.embecosm.com/packages/esp2/embecosm-esp2-or32-uclibc-0.9.28.3-patch-2.0.bz2">
		    http://www.embecosm.com/packages/esp2/embecosm-esp2-or32-uclibc-0.9.28.3-patch-2.0.bz2
		  </ulink>
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para>
		  &mof; <filename>.config</filename> file for &or1k;
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="http://www.meansoffreedom.com/rgd_dot_config_example_uclibc.html">
		    http://www.meansoffreedom.com/rgd_dot_config_example_uclibc.html
		  </ulink>
		</para>
		<para>
		  The text on this web page should be cut and pasted into the
		  <filename>.config</filename> file (replacing the existing
		  contents) in the main &uclibc; directory.
		</para>
	      </entry>
	    </row>

	    <!-- Or1ksim -->

	    <row>
	      <entry morerows="1" valign="middle">
		<para>
		  &or1ksim;
		</para>
	      </entry>
	      <entry>
		<para>
		  Distribution
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="http://www.opencores.org/projects.cgi/web/or1k/or1ksim-0.3.0rc2.tar.gz">
		    http://www.opencores.org/projects.cgi/web/or1k/or1ksim-0.3.0rc2.tar.gz
		  </ulink>
		  (development version, requires free OpenCores login)
		</para>
		<para>
		  <ulink
		      url="http://www.opencores.org/projects.cgi/web/or1k/or1ksim-0.2.0.tar.gz">
		    http://www.opencores.org/projects.cgi/web/or1k/or1ksim-0.2.0.tar.gz
		  </ulink>
		  (stable version, requires free OpenCores login)
		</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para>
		  Patch for &or1ksim; 0.2.0
		</para>
	      </entry>
	      <entry>
		<para>
		  <ulink
		      url="http://www.opencores.org/projects.cgi/web/or1k/or1ksim-0.2.0-patch-2.0.bz2">
		    http://www.opencores.org/projects.cgi/web/or1k/or1ksim-0.2.0-patch-2.0.bz2
		  </ulink>
		  (requires free OpenCores login)
		</para>
		<para>
		  <ulink
		      url="http://www.embecosm.com/packages/esp2/embecosm-esp2-or1ksim-0.2.0-patch-2.0.bz2">
		    http://www.embecosm.com/packages/esp2/embecosm-esp2-or1ksim-0.2.0-patch-2.0.bz2
		  </ulink>
		</para>
	      </entry>
	    </row>

	  </tbody>
	</tgroup>
      </informaltable>

      <para>
	The use of these source distributions and patches is described in the
	sections of <xref linkend="chap_building" /> relevant to each tool.
      </para>

    </sect1>

  </chapter>

  <chapter id="chap_building">
    <title>
      Building the Components
    </title>

    <para>
      In general the &opencores; website (<ulink
      url="http://www.opencores.org">www.opencores.org</ulink>) provides
      &patch; files for tools from third parties (e.g. &gcc;), rather than the
      full source code tree (&patchref;). In general the &opencores; &cvs; tree
      contains only the files that differ from the standard source code of the
      tool and a &diff; file to apply those changes to the standard source code.
    </para>

    <sect1 id="sec_binutils">
      <title>
	&gnu; &binutils; Version 2.16.1
      </title>

      <para>
	&binutils; provides the basic &gnu; utilities required by the
	remainder of the tool chain. The tools are
	<command>addr2line</command>, <command>ar</command>,
	<command>as</command>, <command>c++filt</command>,
	<command>ld</command>, <command>nm</command>,
	<command>objcopy</command>, <command>objdump</command>,
	<command>ranlib</command>, <command>readelf</command>,
	<command>size</command>, <command>strings</command> and
	<command>strip</command>.
      </para>
      <indexterm>
	<primary>&binutils;</primary>
      </indexterm>

      <important>
	<para>
	  Having built and installed &binutils;, don't forget to follow the
	  &binutils; specific instructions in <xref
	  linkend="sec_binutils_setup" />.
	</para>
      </important>

      <sect2 id="sec_binutils_download">
	<title>
	  Generating the &binutils; Source Code
	</title>

	<para>
	  Download clean versions of the distribution and the patch file for
	  &or1k; from the locations given in <xref linkend="sec_locations"
	  />. The patch file from &mof; is recommended rather than the patch
	  file which can be found on the &opencores; website, since it fixes a
	  major bug in &binutils;.
	</para>
	<indexterm>
	  <primary>&binutils;</primary>
	  <secondary>source code generation</secondary>
	</indexterm>

	<important>
	  <para>
	    Ensure the version number (2.16.1) of the distribution is
	    <emphasis>exactly</emphasis> the same.
	  </para>
	</important>

	<para>
	  Unpack the downloaded source code and apply the patch file.
	</para>

	<note>
	  <para>
	    A patch file is the output from a recursive use of &diff;
	    between two file hierarchies&mdash;typically the original file
	    hierarchy and the file hierarchy with changes. The &patch; utility
	    provides the inverse functions, allowing the new file hierarchy to
	    be generated from the original.
	  </para>
	  <indexterm>
	    <primary>patch file</primary>
	    <secondary>how to apply</secondary>
	  </indexterm>

	  <para>
	    Since the names of the top directories in the hierarchy may not be
	    identical, &patch; includes an option <option>-p</option> to
	    specify the amount of the file hierarchy to be stripped off. A
	    value of 1 is common, to remove just the top level directory name.
	  </para>

	  <para>
	    For example if the source code has been downloaded as
	    <filename>binutils-2.16.1.tar.bz2</filename> with the patch file
	    in the same directory, the following commands would be appropriate
	  </para>

	  <programlisting>
tar jxf binutils-2.16.1.tar.bz2
cd binutils-2.16.1
bzcat -dc ../binutils_2.16.1_unified.diff_rgd_fixed.bz2 | patch -p1
	  </programlisting>

	</note>

      </sect2>

      <sect2 id="sec_binutils_config">
	<title>
	  Configuring &binutils;
	</title>

	<para>
	  All the &gnu; components build in a directory
	  <emphasis>separate</emphasis> from the original source tree. A
	  &configure; script is used from within this build directory to
	  generate a &makefile; suitable for the particular component.
	</para>
	<indexterm>
	  <primary>&binutils;</primary>
	  <secondary>configuration</secondary>
	</indexterm>

	<para>
	  The &configure; script has a huge number of parameters (try
	  &configure; <option>--help</option>). Two are common to building the
	  OpenRISC 1200 tool chain.
	</para>
	<indexterm>
	  <primary>&configure; script</primary>
	</indexterm>

	<variablelist>

	  <varlistentry>
	    <term>
	      <option>--target=</option><parameter>architecture</parameter>
	    </term>
	    <listitem>
	      <para>
		The configuration has been extended to understand the OpenRISC
		32 bit architecture if the <option>--target</option> option is
		set to <parameter>or32-uclinux</parameter>. The name of the
		target architecture was chosen, since the work was originally
		aimed at supporting &uclinux;.
	      </para>
	      <indexterm>
		<primary>&configure; script</primary>
		<secondary><option>--target</option> option</secondary>
	      </indexterm>
	      <indexterm>
		<primary>&uclinux;</primary>
	      </indexterm>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>
	      <option>--prefix=</option><parameter>install</parameter>
	    </term>
	    <listitem>
	      <para>
		This specifies the directory in which all the components will
		be installed. The default (typically
		<filename>/usr/local</filename>) is not appropriate, since
		these are not tools for the workstation, but to cross-compile
		for the &or1200; core. It is important that the same
		installation directory is used for all the components
		built. The examples here all use
		<filename>/opt/or32</filename> as the install directory.
	      </para>
	      <indexterm>
		<primary>&configure; script</primary>
		<secondary><option>--prefix</option> option</secondary>
	      </indexterm>
	    </listitem>
	  </varlistentry>

	</variablelist>

	<para>
	  For example if the source code has been downloaded and patched in a
	  sub-directory, <filename>binutils-2.16.1</filename>, then from the
	  parent directory (i.e. the one containing
	  <filename>binutils-2.16.1</filename>), the following commands would
	  be appropriate.
	</para>

	<programlisting>
mkdir builddir_binutils
cd builddir_binutils
../binutils-2.16.1/configure --target=or32-uclinux --prefix=/opt/or32
	</programlisting>

      </sect2>

      <sect2 id="sec_binutils_build_install">
	<title>
	  Building and Installing &binutils;
	</title>

	<para>
	  Having configured the component, there are then three steps to
	  building and installing the component.
	</para>
	<indexterm>
	  <primary>&binutils;</primary>
	  <secondary>building and installing</secondary>
	</indexterm>

	<variablelist>

	  <varlistentry>
	    <term>
	      &makeall;
	    </term>
	    <listitem>
	      <para>
		Build the component in the build directory.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>
	      &makecheck;
	    </term>
	    <listitem>
	      <para>
		Carry out tests to ensure the component has built
		correctly. This will be of limited use here, since the goal is
		to build a cross compiling tool chain, the results of which
		will not run in the development environment.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>
	      &makeinstall;
	    </term>
	    <listitem>
	      <para>
		Install the component in the directory specified when
		configuring.
	      </para>
	    </listitem>
	  </varlistentry>

	</variablelist>

	<para>
	  For example if a build directory has been created as in <xref
	  linkend="sec_binutils_config" />, then the following commands would
	  be appropriate.
	</para>

	<programlisting>
make all
make install
	</programlisting>

	<para>
	  The result is a set of cross platform commands installed in
	  <filename>/opt/or32/bin</filename>:
	  <command>or32-uclinux-addr2line</command>,
	  <command>or32-uclinux-ar</command>,
	  <command>or32-uclinux-as</command>,
	  <command>or32-uclinux-c++filt</command>,
	  <command>or32-uclinux-ld</command>,
	  <command>or32-uclinux-nm</command>,
	  <command>or32-uclinux-objcopy</command>,
	  <command>or32-uclinux-objdump</command>,
	  <command>or32-uclinux-ranlib</command>,
	  <command>or32-uclinux-readelf</command>,
	  <command>or32-uclinux-size</command>,
	  <command>or32-uclinux-strings</command> and
	  <command>or32-uclinux-strip</command>.
	</para>

	<para>
	  In addition there is also a further sub-directory,
	  <filename>/opt/or32/or32-uclinux/bin</filename> (observe the extra
	  <filename>or32-uclinx</filename>), which provides the main
	  cross-platform commands <emphasis>without</emphasis> their prefix
	  (<command>ar</command>, <command>as</command>,
	  <command>ld</command>, <command>nm</command>,
	  <command>objdump</command>, <command>ranlib</command> and
	  <command>strip</command>). This will be required by later component
	  builds.
	</para>

      </sect2>

      <sect2 id="sec_binutils_setup">
	<title>
	  Setting up &binutils;
	</title>

	<para>
	  The key final stage is to add the new cross-platform utilities to
	  the search path, so they can be found in subsequent stages. For &sh;
	  and &bash; users:
	</para>
	<indexterm>
	  <primary>&binutils;</primary>
	  <secondary>post-install setup</secondary>
	</indexterm>

	<programlisting>
export PATH=/opt/or32/bin:$PATH
	</programlisting>

	<para>
	  For &csh; and &tcsh; users:
	</para>

	<programlisting>
setenv PATH /opt/or32/bin:$PATH
	</programlisting>

	<tip>
	  <para>
	    It is useful to add these environment setup commands to
	    <filename>.profile</filename> (&sh; users),
	    <filename>.bash_profile</filename> (&bash; users) or
	    <filename>.login</filename> (&csh; and &tcsh;), to ensure they are
	    set up for subsequent sessions.
	  </para>
	</tip>

      </sect2>
    </sect1>

    <sect1>
      <title>
	&gnu; C Compiler Version 3.4.4 (Initial Version)
      </title>

      <para>
	A compiler is closely tied to its associated operating system and
	libraries, in this case &linux; and &uclibc;. Eventually the &gcc;
	compiler has to be built in parallel with both of these (see <xref
	linkend="sec_gcc_2" />). However, initially a plain compiler without
	knowledge of operating system or libraries suffices.
      </para>
      <indexterm>
	<primary>&gnu; C Compiler</primary>
	<see>&gcc;</see>
      </indexterm>
      <indexterm>
	<primary>&gcc;</primary>
      </indexterm>

      <sect2 id="sec_gcc_download">
	<title>
	  Generating the &gcc; Source Code
	</title>

	<para>
	  Download clean versions of the distribution and the patch file for
	  &or1k; from the locations given in <xref linkend="sec_locations"
	  />. The recommended patch file comes from the &mof; website. It is
	  identical in content to the patch file which can be found on the
	  &opencores; website, but is compressed, which saves bandwidth.
	</para>
	<indexterm>
	  <primary>&gcc;</primary>
	  <secondary>source code generation</secondary>
	</indexterm>

	<important>
	  <para>
	    Ensure the version number of the distribution (3.4.4) is
	    <emphasis>exactly</emphasis> the same.
	  </para>
	</important>

	<para>
	  Unpack the downloaded source code and apply the patch file
	  (&patchref;).
	</para>

      </sect2>

      <sect2 id="sec_gcc_config">
	<title>
	  Configuring &gcc;
	</title>

	<para>
	  Like &binutils;, &gcc; is built in a separate build directory. It is
	  configured to create just a cross-compiler for C.
	</para>
	<indexterm>
	  <primary>&gcc;</primary>
	  <secondary>configuration</secondary>
	</indexterm>

	<programlisting>
mkdir builddir-gcc
cd builddir-gcc
../gcc-3.4.4/configure --target=or32-uclinux --prefix=/opt/or32 \
    --enable-languages=c
	</programlisting>

	<para>
	  The configuration will automatically assume that the various
	  &binutils; utilities are prefixed by the target name, so finds
	  <command>or32-uclinux-as</command> as the assembler and
	  <command>or32-uclinux-ld</command> as the linker, so long as they
	  are on the search path (in this example
	  <filename>/opt/or32/bin</filename>).
	</para>

	<note>
	  <para>
	    These instructions are simpler than those given on the &mof;
	    and &opencores; websites. At this stage the objective is a vanilla
	    cross-compiler, without reference to the &linux; operating system
	    or &uclibc; libraries. No additional configuration flags are
	    required.
	  </para>
	</note>

      </sect2>

      <sect2 id="sec_gcc_build_install">
	<title>
	  Building and Installing &gcc;
	</title>

	<para>
	  The procedure is the same as that from &binutils; (see <xref
	  linkend="sec_binutils_build_install" />). As before the use of
	  &makecheck; is omitted, since it is of little meaning in a
	  cross-compiling environment.
	</para>
	<indexterm>
	  <primary>&gcc;</primary>
	  <secondary>building and installing</secondary>
	</indexterm>

	<programlisting>
make all
make install
	</programlisting>

	<para>
	  Five new commands are now available in the installation
	  <filename>bin</filename> sub-directory:
	  <command>or32-uclinux-cpp</command>,
	  <command>or32-uclinux-gcc</command>,
	  <command>or32-uclinux-gcc-3.4.4</command>,
	  <command>or32-uclinux-gccbug</command> and
	  <command>or32-uclinux-gcov</command>.
	</para>

	<para>
	  In addition <command>gcc</command> without its prefix appears in the
	  <filename>/opt/or32/or32-uclinux/bin</filename> directory.
	</para>

	<para>
	  The installation has also set up a &gcc; library hierarchy in
	  <filename>/opt/or32/lib/gcc/or32-uclinux/3.4.4</filename>. As well
	  as the main &gcc; library, this includes fixed versions of include
	  files. These are not relevant at this stage, but will be
	  important when the &linux; and &uclibc; installations are created
	  and fixed versions of their header files are required.
	</para>

      </sect2>
    </sect1>

    <sect1 id="sec_gdb">
      <title>
	&gnu; Debugger Version 6.8
      </title>

      <para>
	&gdb; is not essential to getting a working &linux; environment for
	OpenRISC, so this step may be omitted initially.
      </para>
      <indexterm>
	<primary>GNU Debugger</primary>
	<see>&gdb;</see>
      </indexterm>
      <indexterm>
	<primary>&gdb;</primary>
      </indexterm>

      <para>
	This section documents release 2.0 of the &gdb; version 6.8 for the
	&or1k;. This implements the &gdb; <emphasis>Remote Serial
	Protocol</emphasis> (&rsp;) for OpenRISC 1000, thereby enabling the
	&gdb; <command>target&nbsp;remote</command> and
	<command>target&nbsp;extended-remote</command> commands.
      </para>
      <indexterm>
	<primary>Remote Serial Protocol</primary>
      </indexterm>

      <important>
	<para>
	  This is now the recommended protocol for connecting &gdb; to &or1k;
	  targets.
	</para>
      </important>

      <para>
	Previously, the &or1k; port of &gdb; only worked through the &jtag;
	port of the processor, which had to incorporate a working debug
	unit. The connection to the target could either be through the parallel
	port to physical hardware connected via a JP1 header, or via TCP/IP to
	a remote target. Communication to the remote target was via the
	proprietary &or1k; Remote &jtag; Protocol.
      </para>
      <indexterm>
	<primary>Remote &jtag; Protocol (deprecated)</primary>
      </indexterm>

      <important>
	<para>
	  The &or1k; Remote &jtag; Protocol is still supported for backward
	  compatibility, but now deprecated. All remote connection should be
	  through the &gdb; Remote Serial Protocol.
	</para>
      </important>

      <para>
	A remote target should implement the server side of either or both of
	the &gdb; Remote Serial Protocol and the &or1k; Remote &jtag;
	Protocol. The target may be the &or1ksim; architectural simulator or a
	driver for physical hardware, such as the &usb; &jtag; connector made
	by ORSoC&nbsp;AB.
      </para>

      <para>
	There are two variants of the Debug Unit for the &or1k;, with slightly
	different &jtag; interfaces.
      </para>
	<indexterm>
	  <primary>Debug Unit</primary>
	  <secondary>&jtag; interface</secondary>
	</indexterm>
	<indexterm>
	  <primary>&jtag;</primary>
	  <see>Debug Unit</see>
	</indexterm>

      <orderedlist>
	<listitem>
	  <para>
	    The original &jtag; interface was created as part of the OpenRISC
	    SoC project, &orpsoc; <xref linkend="ref_orpsoc" />. It provides
	    three scan chains: one to access all the Special Purpose
	    Registers, one to access external memory and one providing control
	    of the CPU. The control scan chain can reset, stall or trace the
	    processor.
	  </para>
	  <indexterm>
	    <primary>Debug Unit</primary>
	    <secondary>&jtag; interface</secondary>
	    <tertiary>ORPSoC version</tertiary>
	  </indexterm>
	</listitem>

	<listitem>
	  <para>
	    A new &jtag; interface was provided by Igor Mohor in 2004 <xref
	    linkend="ref_or1k_debug" />. It provides the same access to
	    Special Purpose Registers and external memory, but offers a
	    simpler control interface offering only the ability to stall or
	    reset the processor.
	  </para>
	  <indexterm>
	    <primary>Debug Unit</primary>
	    <secondary>&jtag; interface</secondary>
	    <tertiary>Igor Mohor version</tertiary>
	  </indexterm>
	</listitem>
      </orderedlist>

      <para>
	When connecting via the &gdb; Remote Serial Protocol, the version of
	&jtag; implemented does not matter&mdash;the &rsp; server will resolve
	the issue automatically. However for direct connection, or remote
	connection via the &or1k; Remote &jtag; Protocol, the type of &jtag;
	interface must be specified.
      </para>

      <para>
	A detailed description of the &or1k; port of &gdb; is provided in the
	&gdb; "howto" from &embecosm; <xref linkend="ref_app_note_3" />. An
	explanation of the &rsp; server implementation is provided in the
	&rsp; "howto" from &embecosm; <xref linkend="ref_app_note_4"/>.
      </para>

      <para>
	This version of &gdb; has been tested with version 0.3.0 release
	candidate 2 of &or1ksim; as described in <xref linkend="sec_or1ksim"
	/>. This implements the original &orpsoc; version of the Debug
	Unit. The &or1k; port of &gdb; is designed to support either
	interface, controlled by &gdb; commands described in the User Guide.
      </para>

      <note>
	<para>
	  To date there has been limited testing of &gdb;&nbsp;6.8 with real
	  hardware. User feedback on experience with real hardware is
	  welcomed.
	</para>
      </note>

      <sect2>
	<title>
	  Generating the &gdb; Source Code
	</title>

	<para>
	  Download clean versions of the distribution and the patch file for
	  &or1k; from the locations given in <xref linkend="sec_locations"
	  />.
	</para>
	<indexterm>
	  <primary>&gdb;</primary>
	  <secondary>source code generation</secondary>
	</indexterm>

	<important>
	  <para>
	    Ensure the version number (6.8) is <emphasis>exactly</emphasis>
	    the same
	  </para>
	</important>

	<para>
	  Unpack the downloaded source code. No patching is needed.
	</para>

      </sect2>

      <sect2>
	<title>
	  Configuring &gdb;
	</title>

	<para>
	  Like &binutils; and &gcc;, &gdb; is built in a separate build
	  directory. It is configured to create just a cross-platform debugger
	  for &or1k; programs compiled with
	  <command>or32-uclinux-gcc</command>.
	</para>
	<indexterm>
	  <primary>&gdb;</primary>
	  <secondary>configuration</secondary>
	</indexterm>

	<programlisting>
mkdir builddir-gdb
cd builddir-gdb
../gdb-6.8/configure --target=or32-uclinux --prefix=/opt/or32
	</programlisting>

      </sect2>

      <sect2>
	<title>
	  Building and Installing &gdb;
	</title>

	<para>
	  The procedure to build &gdb; is the same as that from with
	  &binutils; and &gcc;. As with these tools, the use of &makecheck; is
	  omitted, since it is of little meaning in a cross-compiling
	  environment.
	</para>
	<indexterm>
	  <primary>&gdb;</primary>
	  <secondary>building and installing</secondary>
	</indexterm>

	<programlisting>
make all
make install
	</programlisting>

      </sect2>
    </sect1>

    <sect1 id="sec_linux">
      <title>
	&linux; Kernel Version 2.6.23
      </title>

      <para>
	This version of the application note describes &linux; kernel version
	2.6.23, for which a much simplified build has been developed.
      </para>
      <indexterm>
	<primary>&linux;</primary>
      </indexterm>

      <sect2 id="sec_linux_download">
	<title>
	  Generating the &linux; Source Code
	</title>

	<para>
	  Download clean versions of the distribution and the patch file for
	  &or1k; from the locations given in <xref linkend="sec_locations"
	  />.
	</para>
	<indexterm>
	  <primary>&linux;</primary>
	  <secondary>source code generation</secondary>
	</indexterm>

	<important>
	  <para>
	    Ensure the version number (2.6.23) is
	    <emphasis>exactly</emphasis> the same.
	  </para>
	</important>

	<para>
	  Unpack the downloaded source code and apply the patch file
	  (&patchref;).
	</para>

      </sect2>

      <sect2 id="sec_linux_config">
	<title>
	  Configuring &linux;
	</title>

	<para>
	  The configuration options for a &linux; kernel are held in the
	  <filename>.config</filename> file in the top directory of the
	  kernel. The code patched for OpenRISC sets up a suitable file in
	  <filename>.config</filename>.
	</para>
	<indexterm>
	  <primary>&linux;</primary>
	  <secondary>configuration</secondary>
	</indexterm>

	<note>
	  <para>
	    Previous versions of these instructions required copying of a file
	    into the <filename>.config</filename> file. This is no longer
	    required.
	  </para>
	</note>

	<para>
	  The kernel can now be configured using its graphical configuration
	  tool.
	</para>

	<programlisting>
make menuconfig ARCH=or32 CROSS_COMPILE=/opt/or32/bin/or32-uclinux-
	</programlisting>

	<para>
	  Use the cursor keys to move to the
	  <computeroutput><guisubmenu>OpenRISC specific
	  drivers</guisubmenu></computeroutput> sub-menu and select it. There
	  is only one entry, <computeroutput><guimenuitem>OpenCores Ethernet
	  support</guimenuitem></computeroutput>, which should be deselected
	  (press <userinput><keycap>N</keycap></userinput>).
	</para>

	<note>
	  <para>
	    The Ethernet code does not appear to work reliably in the
	    &or1ksim; simulator, which is why it is deselected here.
	  </para>
	</note>

	<para>
	  Having made this change, exit up through the menus and from the
	  configuration system, saving the configuration file when
	  prompted. As well as creating the <filename>.config</filename>
	  file, this will have also linked in the correct
	  <token>include</token> files for the &linux; kernel build.
	</para>

	<para>
	  The build of &linux; makes use of a RAMdisk filing system. For
	  initial building, the patched source includes an image from
	  &mof; which is suitable. This provides a set of &busybox;
	  utilities which can be used when Linux starts up.
	</para>

	<note>
	  <para>
	    Previous versions of these instructions required copying of a file
	    into the RAMdisk image. This is no longer required.
	  </para>
	</note>
      </sect2>

      <sect2>
	<title>
	  Building &linux; for the OpenRISC 1200
	</title>

	<para>
	  The configured &linux; is built from the configured &makefile;.
	</para>
	<indexterm>
	  <primary>&linux;</primary>
	  <secondary>building</secondary>
	</indexterm>

	<programlisting>
make vmlinux ARCH=or32 CROSS_COMPILE=/opt/or32/bin/or32-uclinux-
	</programlisting>

	<note>
	  <para>
	    There will be a number of warnings at the end about section
	    mismatches. These are a known problem, which can be ignored.
	  </para>
	</note>

      </sect2>
    </sect1>

    <sect1>
      <title>
	&uclibc; Version 0.9.28.3
      </title>

      <para>
	<ulink url="http://www.uclibc.org">&uclibc;</ulink> is a C library for
	use particularly in embedded environments. It is substantially smaller
	than the full <application>glibc</application> library.
      </para>
      <indexterm>
	<primary>&uclibc;</primary>
      </indexterm>

      <sect2>
	<title>
	  Generating the &uclibc; Source
	</title>

	<para>
	  Download clean versions of the distribution and the
	  <emphasis>three</emphasis> patch files for
	  &or1k; from the locations given in <xref linkend="sec_locations"
	  />.
	</para>
	<indexterm>
	  <primary>&uclibc;</primary>
	  <secondary>source code generation</secondary>
	</indexterm>

	<important>
	  <para>
	    Ensure the version number (0.9.28.3) is
	    <emphasis>exactly</emphasis> the same.
	  </para>
	</important>

	<para>
	  Unpack the downloaded source code. Apply the main &mof; patch to the
	  main &uclibc; directory (&patchref;). Apply the supplementary &mof;
	  patch file to the <filename>libc</filename> sub-directory of the
	  &uclibc; directory <emphasis>not</emphasis> the main directory.
	</para>

	<para>
	  A further patch is required to ensure &uclibc; will work correctly
	  with the OpenRISC tool chain. The linker can get confused about the
	  &stdio; library initialization and termination. To avoid this, dummy
	  versions of <function>__stdio_init</function> and
	  <function>__stdio_term</function> must be added. Apply the
	  &embecosm; patch file to the main directory to fix these problems.
	</para>

	<para>
	  The patches must be applied in this order. A typical set of commands
	  would be:
	</para>

	<programlisting>
cd uClibc-0.9.28.3
bzcat -dc ../uClibc-0.9.28-or32-unified.bz2 | patch -p1
cd libc
bzcat -dc ../../uClibc-0.9.28-or32-libc-support.bz2 | patch -p1
cd ..
bzcat -dc ../embecosm-esp2-or32-uclibc-0.9.28.3-patch-2.0.bz2 | patch -p1
	</programlisting>

      </sect2>

      <sect2>
	<title>
	  Configuring &uclibc;
	</title>

	<para>
	  Additional configuration options specific to the OpenRISC core are
	  provided in the patched source tree. Make these available by linking
	  to <filename>Config</filename> in the main directory
	</para>
	<indexterm>
	  <primary>&uclibc;</primary>
	  <secondary>configuration</secondary>
	</indexterm>

	<programlisting>
ln -s extra/Configs/Config.or32 Config
	</programlisting>

 
	<para>
	  Configuration for &uclibc; is via the file
	  <filename>.config</filename> in the main directory. Like &linux;,
	  &uclibc; also provides a graphical configuration tool to set up
	  <filename>.config</filename>.
	</para>

	<para>
	  The &mof; website provides a template <filename>.config</filename>
	  file. Copy this from the location given in <xref
	  linkend="sec_locations" /> into <filename>.config</filename>.
	</para>

	<caution>
	  <para>
	    The patched source tree contains a file,
	    <filename>DOT_CONFIG_or32</filename>. This is a historical
	    remnant, and should not be used as the
	    <filename>.config</filename> file.
	  </para>
	</caution>

	<para>
	  The configuration tool is not able to set every parameter, so edit
	  <filename>.config</filename> with a text editor. Change the line
	  setting <option>CROSS_COMPILER_PREFIX</option> option to read.
	</para>

	<programlisting>
CROSS_COMPILER_PREFIX="or32-uclinux-"
	</programlisting>

	<important>
	  <para>
	    This is a key change, and ensures the build of &uclibc; picks up
	    the OpenRISC 1200 tool chain and not the standard workstation
	    compiler
	  </para>
	</important>

	<para>
	  Run the configuration tool, so the remaining changes can be made
	  with the graphical parameter editor.
	</para>

	<programlisting>
make menuconfig
	</programlisting>

	<note>
	  <para>
	    The configuration tool will give two warnings that configuration symbol
	    <literal>CONFIG_OR32</literal> refers to undefined symbols
	    <literal>UCLIBC_HAS_MMU</literal> and
	    <literal>ARCH_HAS_NO_FPU</literal>. These are a known issue, but
	    the warnings are harmless and may be ignored.
	  </para>
	</note>

	<para>
	  Use the cursor keys to move to the
	  <computeroutput><guisubmenu>Target Architecture Features and
	  Options</guisubmenu></computeroutput> sub-menu and select it. Move to
	  the <computeroutput><guimenuitem>Target CPU has a floating point
	  unit (FPU)</guimenuitem></computeroutput> entry and deselect it
	  (press <userinput><keycap>N</keycap></userinput>). Then move further
	  down to the last entry <computeroutput><guimenuitem>Linux kernel
	  source location</guimenuitem></computeroutput> and set this to point
	  to the main &linux; distribution directory.
	</para>

	<para>
	  Return back to the main menu and select the
	  <computeroutput><guisubmenu>General Library
	  Settings</guisubmenu></computeroutput> sub-menu. Move to the
	  <computeroutput><guimenuitem>Large File
	  Support</guimenuitem></computeroutput> entry and deselect it.
	</para>

	<para>
	  Return back to the main menu and select the
	  <computeroutput><guisubmenu>Library Installation
	  Options</guisubmenu></computeroutput> sub-menu. Set the entries for
	  both the <option>RUNTIME_PREFIX</option> and
	  <option>DEVEL_PREFIX</option> options to be the main installation
	  directory (in the examples here <filename>/opt/or32</filename>).
	</para>

	<para>
	  Return to the main menu and exit, saving the new configuration file.
	</para>

      </sect2>

      <sect2>
	<title>
	  Building and installing &uclibc;
	</title>

	<para>
	  The &uclibc; library is built and installed using &make;.
	</para>
	<indexterm>
	  <primary>&uclibc;</primary>
	  <secondary>building and installing</secondary>
	</indexterm>

	<programlisting>
make all
make install
	</programlisting>

	<note>
	  <para>
	    There is no need to set the <envar>CC</envar> environment variable
	    (as suggested by the &mof; website). The use of the
	    <option>CROSS_COMPILER_PREFIX</option> parameter ensures the
	    OpenRISC tool chain is used.
	  </para>
	</note>

	<important>
	  <para>
	    The &uclibc; &makefile; dependencies are not complete. If any
	    parameters are changed, run &makeclean; before
	    rebuilding.
	  </para>
	</important>

      </sect2>
    </sect1>

    <sect1>
      <title>
	&gnu; C Compiler Version 3.4.4 (&linux; and &uclibc; aware)
      </title>

      <para>
	The previous build of &gcc; was not aware of Operating System specific
	<token>include</token> files and libraries. The compiler can now be
	rebuilt, so that it correctly picks up the &linux; and &uclibc;
	<token>include</token> files and libraries.
      </para>

      <sect2 id="sec_gcc_2">
	<title>
	  Reconfiguring &gcc;
	</title>

	<para>
	  Return to the build directory used to build the original &gcc;
	  compiler (see <xref linkend="sec_gcc_config" />). Delete the
	  contents and reconfigure &gcc; this time to include a local prefix
	  for searching (using the <option>--with-local-prefix</option> option
	  to &configure;).
	</para>
	<indexterm>
	  <primary>&gcc;</primary>
	  <secondary>rebuilding with &uclibc; and &linux;</secondary>
	</indexterm>

	<programlisting>
cd builddir-gcc
rm -rf *
../gcc-3.4.4/configure --target=or32-uclinux --prefix=/opt/or32 \
    --enable-languages=c --with-local-prefix=/opt/or32/or32-uclinux
	</programlisting>

	<para>
	  The compiler will preferentially consider include and library files
	  within the <filename>/opt/or32/or32-linux</filename> directory (in
	  other words the target specific sub-directory of the installation
	  directory), which can be used for all the &linux; and &uclibc;
	  files.
	</para>

      </sect2>

      <sect2>
	<title>
	  Rebuilding &gcc;
	</title>

	<para>
	  The build and install process for the compiler is identical:
	</para>

	<programlisting>
make all
make install
	</programlisting>

	<para>
	  The final stage is to populate the target specific directory. &gcc;
	  will look here for a <filename>sys-include</filename>
	  directory. This can be linked to the parent
	  <filename>include</filename> directory, which will have been
	  populated by the &uclibc; install process (including any &linux;
	  <filename>include</filename> files used by &uclibc;).
	</para>

	<para>
	  The <filename>lib</filename> sub-directory will be used by the linker
	  from &gcc; to complete linking of compiled programs. This cannot be
	  simply linked, since not all of the main library should appear
	  here. Instead, the relevant library and object files are linked
	  here.
	</para>

	<para>
	  In the examples given here, the install directory is
	  <filename>/opt/or32</filename>. The following commands would set the
	  target specific directory up appropriately.
	</para>

	<programlisting>
cd /opt/or32/or32-uclinux
ln -s ../include sys-include
cd lib
ln -s ../../lib/*.* .
	</programlisting>

	<important>
	  <para>
	    The &mof; instructions suggest copying the library files into the
	    <filename>lib</filename> directory. However linking is preferable,
	    since when the &uclibc; is rebuilt, any changes will also appear
	    in the <filename>lib</filename> directory.
	  </para>
	</important>

      </sect2>
    </sect1>

    <sect1 id="sec_or1ksim">
      <title>
	The &or1ksim; Simulator
      </title>

      <para>
	The OpenRISC architectural simulator, &or1ksim;, is a traditional
	interpreting &iss;, which also models some of the standard &orpsoc;
	components (memory, &uart; etc). It represents work in
	progress. Having been dormant for two years, the project is now active
	again.
      </para>
      <indexterm>
	<primary>&or1ksim;</primary>
      </indexterm>

      <para>
	This section is mainly concerned with &or1ksim; 0.3.0 candidate
	release 2 and later, since this version is the first to implement the
	&gdb; Remote Serial Protocol. This is now the recommended interface
	from &gdb; to &or1ksim;. The old &or1k; Remote &jtag; Protocol is
	still part of the system, but is now deprecated.
      </para>
      <indexterm>
	<primary>Remote Serial Protocol</primary>
      </indexterm>

      <para>
	Since version 0.3.0 is still regarded as a development version of the
	tool. This section also covers the use of the stable version 0.2.0.
      </para>

      <sect2>
	<title>
	  Generating the &or1ksim; Source
	</title>

	<para>
	  Download clean versions of the distribution and the patch file for
	  &or1k; from the locations given in <xref linkend="sec_locations"
	  />. Choose either the development version (0.3.0rc2, recommended) or
	  the old stable version (0.2.0).
	</para>
	<indexterm>
	  <primary>&or1ksim;</primary>
	  <secondary>source code generation</secondary>
	</indexterm>

	<important>
	  <para>
	    Ensure the version number (0.3.0rc2 for the development version or
	    0.2.0 for the stable version) is <emphasis>exactly</emphasis> the
	    same. Note in particular that the release candidate versions of
	    version 0.2.0 (0.2.0rc1, 0.2.0rc2 and 0.2.0rc3) are
	    <emphasis>not</emphasis> suitable.
	  </para>
	</important>

	<para>
	  Unpack the downloaded source code. If using the stable version
	  (0.2.0) apply the patch file (&patchref;). No patching is required
	  for the development version (0.3.0rc2).
	</para>

	<para>
	  There are several issues in the stable version (0.2.0) of &or1ksim;
	  which are fixed by the patch file.
	</para>
	<indexterm>
	  <primary>&or1ksim;</primary>
	  <secondary>bugs fixed</secondary>
	</indexterm>

	<orderedlist>
	  <listitem>
	    <para>
	      A bug in connecting to the simulator from &gdb; via the &jtag;
	      port (bad call to <function>fcntl</function>).
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      Several bugs in using the simulator with an &xterm; connected to
	      the &uart;
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      A problem with accessing strings when using diagnostic printf
	      (the <function>simprintf()</function> function).
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      A problem with the caches being accessed, even when
	      disabled. This problem is only partially fixed.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      A number of changes in the Special Purpose Register bit
	      configurations in the &or1k; architecture. These have changed
	      since &or1ksim; was first created.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      A number of changes to ensure the simulator works correctly with
	      &gdb;&nbsp;6.8.
	    </para>
	  </listitem>
	</orderedlist>

	<para>
	  The patch also adds a function to print a single
	  character via a <literal>NOP</literal>
	  trap. <literal>NOP&nbsp;1</literal> is adopted for this
	  function. This is particularly valuable when
	  <function>simprintf</function> is not usable, during
	  <acronym>MMU</acronym> setup.
	</para>

	<para>
	  All these changes (and many other improvements) are already
	  incorporated in the development version (0.3.0rc2), which thus needs
	  no patching.
	</para>

      </sect2>

      <sect2>
	<title>
	  Configuring &or1ksim;
	</title>

	<para>
	  Configuration is similar to that of the &gnu; tool chain, using a
	  &configure; script, to set a target and an install
	  directory.
	</para>
	<indexterm>
	  <primary>&or1ksim;</primary>
	  <secondary>configuration</secondary>
	</indexterm>

	<para>
	  It is a good idea <emphasis>not</emphasis> to use the same install
	  directory for binaries that was used for the tool chain. The tool
	  chain is aimed at cross compiling for the &or1k; architecture and
	  any include files etc will be specific to that architecture. By
	  contrast &or1ksim; is a native application for the workstation
	  architecture (e.g. a PC). So a typical configuration would be:
	</para>

	<programlisting>
mkdir builddir_or1ksim
cd builddir_or1ksim
../or1ksim-0.3.0rc2/configure --target=or32-uclinux --prefix=/opt/or1ksim
	</programlisting>

	<note>
	  <para>
	    The configuration target, <parameter>or32-uclinux</parameter>, is
	    chosen for consistency with the main tool chain. It is not the same
	    as that suggested in the <filename>INSTALL</filename> instructions
	    with the distribution, but works perfectly satisfactorily.
	  </para>
	</note>

	<note>
	  <para>
	    The <filename>INSTALL</filename> instructions with the
	    distribution do not describe use of the <option>--prefix</option>
	    option, but this works very satisfactorily here.
	  </para>
	</note>

      </sect2>

      <sect2>
	<title>
	  Building and installing &or1ksim;
	</title>

	<para>
	  Building and installing uses the &makefile; generated by the
	  configuration stage. There is no use of the &makecheck; command,
	  since there is a separate test suite for use with the simulator (see
	  <xref linkend="sec_or1ksim_test" />). Assuming the install
	  directory has been chosen as <filename>/opt/or1ksim</filename>,
	  suitable commands would be:
	</para>
	<indexterm>
	  <primary>&or1ksim;</primary>
	  <secondary>building and installing</secondary>
	</indexterm>

	<programlisting>
make
make install
	</programlisting>

	<para>
	  A new command, <command>or32-uclinux-sim</command> will now be
	  present in the <filename>opt/or1ksim/bin</filename> directory.
	</para>

      </sect2>

      <sect2 id="sec_or1ksim_setup">
	<title>
	  Setting up &or1ksim;
	</title>

	<para>
	  If &or1ksim; has been installed as recommended in a different
	  directory to the remainder of the tool chain, that directory must be
	  added to the search path. For &sh; and &bash; users:
	</para>
	<indexterm>
	  <primary>&or1ksim;</primary>
	  <secondary>post-install setup</secondary>
	</indexterm>

	<programlisting>
export PATH=/opt/or1ksim/bin:$PATH
	</programlisting>

	<para>
	  For &csh; and &tcsh; users:
	</para>

	<programlisting>
setenv PATH /opt/or1ksim/bin:$PATH
	</programlisting>

	<tip>
	  <para>
	    As with the main tool chain install directory, it is useful to add
	    these environment setup commands to <filename>.profile</filename>
	    (&sh; users), <filename>.bash_profile</filename> (&bash; users) or
	    <filename>.login</filename> (&csh; and &tcsh;), to ensure they are
	    set up for subsequent sessions.
	  </para>
	</tip>

      </sect2>

    </sect1>

  </chapter>

  <chapter>
    <title>
      Getting it All to Work!
    </title>

    <para>
      &or1ksim; comes with a test suite of small programs to exercise the
      simulator. As a major test, the &linux; 2.6.23 kernel can be run on the
      simulator.
    </para>

    <caution>
      <para>
	The &or1ksim; test suite is known to have considerable limitations. It
	should be considered only a rudimentary test that the tool chain and
	architectural simulator are working.
      </para>
    </caution>

    <sect1 id="sec_or1ksim_test">
      <title>
	Running the &or1ksim; Test Suite
      </title>

      <para>
	The test suite is found in the <filename>testbench</filename>
	sub-directory of the main &or1ksim; distribution.
      </para>
      <indexterm>
	<primary>&or1ksim;</primary>
	<secondary>test suite</secondary>
      </indexterm>

      <sect2>
	<title>
	  Configuring the &or1ksim; Test Suite
	</title>

	<para>
	  The test suite is configured using a &configure; script. This
	  specifies both the target and the host (which forces
	  cross-compilation for the OpenRISC 1000 architecture). Since the
	  tests are not to be installed, there is no need to use the
	  <option>--prefix</option> option. The configuration command should
	  therefore be as follows.
	</para>
	<indexterm>
	  <primary>&or1ksim;</primary>
	  <secondary>test suite</secondary>
	  <tertiary>configuration</tertiary>
	</indexterm>

	<programlisting>
cd or1ksim-0.2.0/testbench
./configure --target=or32-uclinux --host=or32
	</programlisting>

	<caution>
	  <para>
	    There appears to be a time stamp problem with the &configure;
	    script, so that the first time it is run it attempts to regenerate
	    itself (without success). If this occurs, then just rerun the
	    command&mdash;it only fails once.
	  </para >
	</caution>

      </sect2>

      <sect2>
	<title>
	  Running the &or1ksim; Test Suite
	</title>

	<para>
	  Configuration creates a &makefile;. &makeall; will build all the
	  tests, followed by &makecheck; to run the tests.
	</para>
	<indexterm>
	  <primary>&or1ksim;</primary>
	  <secondary>test suite</secondary>
	  <tertiary>running</tertiary>
	</indexterm>

	<caution>
	  <para>
	    The time stamp problem with the &configure; script may appear here
	    when running &makeall;, so that the first time it is run it
	    attempts to regenerate itself (without success). If this occurs,
	    then just rerun the &makeall; command&mdash;it only fails once.
	  </para >
	</caution>

	<para>
	  Each test, if successful should output the following two lines.
	</para>

	<screen>
report(<literal>0xdeaddead</literal>);
exit(0)
	</screen>

	<para>
	  In the event of a test failing, its output can be found in
	  <filename>/tmp/<parameter>testname</parameter>_output</filename> and
	  a count of the cycles executed in
	  <filename>/tmp/<parameter>testname</parameter>_error</filename> .
	</para>

	<note>
	  <para>
	    The &makecheck; command does a simple test that the last two lines
	    of output are as indicated above to determine success or
	    failure. In practice, one or two tests (commonly the
	    multiplication test and frame buffer test) may report failure, due
	    to &or1ksim; warning messages being interspersed between and after
	    these two lines. Manual inspection of the relevant output files in
	    the <filename>/tmp</filename> directory can be used to verify
	    correct termination has actually occurred.
	  </para>
	</note>

      </sect2>
    </sect1>

    <sect1>
      <title>
	&linux; with &or1ksim;
      </title>
      <indexterm>
	<primary>&linux;</primary>
	<secondary>running under &or1ksim;</secondary>
      </indexterm>

      <sect2>
	<title>
	  Configuring &or1ksim; for use with &linux;
	</title>

	<para>
	  &or1ksim; is configured via a configuration file, which is specified
	  by the <option>-f</option>. This is used to specify the detailed
	  behavior of the CPU (virtual memory, caches etc), the various
	  memories to be attached and the behavior of the various peripherals
	  modeled. The structure of the configuration file is described in
	  comments within the default configuration file
	  (<filename>sim.cfg</filename> supplied in the main directory of
	  &or1ksim;).
	</para>
	<indexterm>
	  <primary>&linux;</primary>
	  <secondary>running under &or1ksim;</secondary>
	  <tertiary>configuring &or1ksim;</tertiary>
	</indexterm>

	<para>
	  The &linux; distribution, as patched for OpenRISC, is supplied with
	  a configuration file, <filename>sim.cfg</filename> in its main
	  directory. Three changes are needed to this, for the &linux; kernel
	  built in <xref linkend="sec_linux" />.
	</para>

	<caution>
	  <para>
	    Do not attempt to use the <filename>sim.cfg</filename> supplied
	    with &or1ksim; itself. It specifies a completely inappropriate
	    memory configuration for &linux;.
	  </para>
	</caution>

	<para>
	  Find the line beginning <computeroutput>section sim</computeroutput>
	  in the file <filename>sim.cfg</filename> in the main &linux;
	  directory. This is followed by lines giving parameter values for the
	  simulation. &linux; was built to run at a notional 100MHz. The
	  specification of the time taken by one clock cycle is out by a
	  factor of 1000. Change the value of <option>clkcycle</option> option
	  to <parameter>10ns</parameter>.
	</para>

	<para>
	  Find <computeroutput>section uart</computeroutput>. This specifies
	  that the channel for I/O should be via TCP port 84. This will
	  probably fail, since the port is in the Well Known Ports range,
	  requiring administrative privileges. If it is desired to run
	  &linux; through a telnet link, this should be changed to a value in
	  the Dynamic Range (49152-65535). A separate window can then connect
	  to this port using telnet.
	</para>

	<para>
	  Rather more elegant is to use an &xterm; for output. For this, change
	  the channel specification to:
	</para>

	<programlisting>
channel = "xterm:"
	</programlisting>

	<para>
	  Find <computeroutput>section ethernet</computeroutput>. &linux; was
	  built without Ethernet, so this should be disabled. Set the
	  <option>enabled</option> option to 0.
	</para>

      </sect2>

      <sect2>
	<title>
	  Running &linux; on &or1ksim;
	</title>

	<para>
	  The &linux; kernel should now just boot up. Run &or1ksim; from the
	  main &linux; directory:
	</para>
	<indexterm>
	  <primary>&linux;</primary>
	  <secondary>running under &or1ksim;</secondary>
	  <tertiary>running</tertiary>
	</indexterm>

	<programlisting>
cd linux-2.6.23
or32-uclinux-sim -f sim.cfg vmlinux
	</programlisting>

	<note>
	  <para>
	    &or1ksim; will give a number of warnings about invalid
	    parameters. This is because the <filename>sim.cfg</filename> file
	    was originally created for a different version of &or1ksim;. These
	    parameters are never used in this version of &or1ksim; and the
	    warnings can be ignored.
	  </para>
	</note>

	<para>
	  &linux; will initially show that it is copying from ROM to main
	  memory, and then booting.
	</para>

	<informalfigure>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="linux_copying.png"
			 format="PNG"
			 width="100%"
			 contentwidth="100%"
			 contentdepth="100%"
			 align="center" />
	    </imageobject>
	  </mediaobject>
	</informalfigure>

	<para>
	  There is then a pause of one or two minutes, while the &linux;
	  kernel boots prior to configuring the &uart; I/O. Once that point is
	  reached, then standard &linux; boot messages will begin to
	  appear. At the end of boot, the terminal will prompt to initiate a
	  console session.
	</para>

	<informalfigure>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="linux_ready.png"
			 format="PNG"
			 width="100%"
			 contentwidth="100%"
			 contentdepth="100%"
			 align="center" />
	    </imageobject>
	  </mediaobject>
	</informalfigure>

	<para>
	  The core &linux; commands are available, provided within a &busybox;
	  environment. The default terminal behavior echoes back what is
	  typed, so the initial command should be.
	</para>

	<programlisting>
stty -echo
	</programlisting>

	<para>
	  Normal &linux; behavior is then available.
	</para>

	<informalfigure>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="linux_commands.png"
			 format="PNG"
			 width="100%"
			 contentwidth="100%"
			 contentdepth="100%"
			 align="center" />
	    </imageobject>
	  </mediaobject>
	</informalfigure>

	<para>
	  Custom programs may be added to the &linux; environment by compiling
	  them and adding them to the RAMdisk image. Instructions for this are
	  provided on the &mof; website.
	</para>

      </sect2>
    </sect1>
  </chapter>

  <chapter>
    <title>
      Debugging Strategies
    </title>

    <para>
      Debugging with &or1ksim; is much easier with the release of
      &gdb;&nbsp;6.8 These are some suggestions for approaches that work. Full
      details will be found in the &gdb; User Guide <xref
      linkend="ref_gdb_ug"/>.
    </para>
    <indexterm>
      <primary>debugging strategies</primary>
    </indexterm>

    <sect1>
      <title>
	Debugging using OpenRISC &gdb; via &rsp; and &or1ksim;
      </title>

      <note>
	<para>
	  With the introduction of the &gdb; Remote Serial Protocol interface
	  in &gdb; 6.8 release 2.0 for &or1k; and &or1ksim; 0.3.0rc2 remote
	  debugging has changed considerably. The instructions here have
	  changed significantly since the last issue of this application note.
	</para>
      </note>

      <para>
	This requires the &gnu; debugger built for cross platform use with
	OpenRISC (see <xref linkend="sec_gdb" />). &or1ksim; contains some
	guidelines in the file <filename>README.gdb</filename> in its main
	directory, but these relate to the old &gdb;&nbsp;5.3 version. The
	definitive instructions are in the &gdb; User Guide <xref
	linkend="ref_gdb_ug" />.
      </para>
      <indexterm>
	<primary>debugging strategies</primary>
	<secondary>with &gdb; over &rsp;</secondary>
      </indexterm>

      <para>
	To use the remote debug feature of &or1ksim;, enable the
	<option>debug</option> section in the simulator configuration
	file. Set <option>enabled</option> option to 1 and
	<option>rsp_enabled</option> option to 1. The server port is not
	chosen at random, but set by the <option>server_port</option> option
	here. Good practice would recommend using a value in the Dynamic Range
	(49152-65535), such as the 51000 used in the default configuration
	file. &or1ksim; should be started without specifying any image file.
      </para>

      <para>
	In a separate window start the &or1k; &gdb; command
	(<command>or32-uclinux-gdb</command>).
      </para>

      <tip>
	<para>
	  For those who like their debugging to be graphical, it is
	  perfectly feasible to run &gdb; under &ddd;. The following would
	  be a suitable &ddd; command line.
	</para>

	<programlisting>
ddd --debugger or32-uclinux-gdb --gdb
	</programlisting>
      </tip>

      <para>
	There are three stages to setting up &gdb;.
      </para>

      <orderedlist>

	<listitem>
	  <para>
	    Load a local symbol table (using the &gdb;
	    <command>file</command>) command.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Connect to the remote simulator via &rsp; (using the &gdb;
	    <command>target</command>) command.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Load the program on the remote simulator via &rsp; (using the
	    &gdb; <command>load</command>) command.
	  </para>
	</listitem>
      </orderedlist>

      <para>
	A typical set of commands (once inside &gdb;) to debug a simple "Hello
	World" program on &or1ksim; on the same machine, with &rsp; connecting
	through port 51000 would be:
      </para>

      <programlisting>
file hello_world
target remote :51000
load hello_world
      </programlisting>

      <para>
	At this point the usual &gdb; commands to breakpoint, continue and
	examine programs are available. This includes symbolic disassembly of
	the code.
      </para>

      <note>
	<para>
	  &gdb; connecting through &rsp; with
	  <command>target&nbsp;remote</command> is connecting to a target
	  which is already executing, but has stalled. Thus it is
	  inappropriate to use the <command>run</command> command (which
	  specifies a new program to run). Instead the
	  <command>continue</command> and <command>step</command> commands are
	  used.
	</para>

	<para>
	  The <command>load</command> command will reset the program counter
	  to the entry point of the program. So a subsequent
	  <command>continue</command> will cause the newly loaded program to
	  execute from its entry point.
	</para>
      </note>

    </sect1>

    <sect1>
      <title>
	Debugging Linux
      </title>

      <para>
	&gdb; can be used to debug Linux if required, but there are
	difficulties with handling virtual addresses with a "bare metal"
	debugger. A page miss would require execution of the relevant
	exception handler. As a consequence, all access via the current &gdb;
	implementation is to and from <emphasis>physical</emphasis> addresses,
	bypassing caches and MMUs if present.
      </para>

      <para>
	The eventual solution will be to port KGDB (<ulink
	url="kgdb.linsyssoft.com"/>), which knows how to handle memory in the
	kernel.
      </para>

      <para>
	Sometimes just inserting <function>printk</function> statements is
	sufficient. The problem is that the kernel print function,
	<function>printk</function> does not work until the serial driver is
	up and running. Problems earlier than this (very likely during the
	early stages of porting) will be hidden.
      </para>
      <indexterm>
	<primary>debugging strategies</primary>
	<secondary>&linux; using <function>printk</function></secondary>
      </indexterm>
      <indexterm>
	<primary>&linux;</primary>
	<secondary>debugging using <function>printk</function></secondary>
      </indexterm>

      <para>
	The solution is to patch <function>printk</function> to use the
	internal simulator print facilities. Use of &or1ksim;
	<function>simprintf</function> direct from <function>printk</function>
	is not appropriate, since its argument is a pointer and at the time of
	calling, the whole virtual memory system may be in flux.
      </para>

      <para>
	However <function>printk</function> calls <function>vprintk</function>
	which does the complex work of building the final output string from
	the format string and arguments. This string can then be printed a
	character at a time using the &or1ksim; <literal>NOP_PUTC</literal>
	feature. Since characters are passed in registers, not as pointers, the
	issue of virtual memory does not arise.
      </para>

      <para>
	The implementation of the <function>printk</function> can be found
	in <filename>kernel/printk.c</filename> in the &linux; directory. In
	there find the <function>vprintk</function> function. Immediately
	before it add two functions to write a string one character at a time
	using the &or1ksim; <literal>NOP_PUTC</literal> feature.
      </para>

      <programlisting>
#define NOP_PUTC  4

static void simputc( char c )
{
        asm( "l.or   r3,r0,%0" : : "r" (c));
        asm( "l.nop  %0"       : : "K" (NOP_PUTC));

}       /* simputc() */


static void simputs( char *str )
{
        int  i = 0;

        for( i = 0 ; str[i] != '\0' ; i++ ) {
        simputc( str[i] );
        }
}       /* simputs() */
      </programlisting>

      <para>
	Then find the line in <function>vprintk</function> where the formatted
	string is constructed in the <literal>printk_buf</literal>:
      </para>

      <programlisting>
	printed_len = vscnprintf(printk_buf, sizeof(printk_buf), fmt, args);
      </programlisting>

	<para>
	  Immediately after this use the new <function>simputs</function>
	  function to print this string to the console via &or1ksim;.
	</para>

	<programlisting>
	simputs( printk_buf );	/* For Or1ksim */
	</programlisting>

	<para>
	  Rebuild &linux; (see <xref linkend="sec_linux" />) and run again
	  under the simulator. The &linux; kernel output will appear in the
	  window from which the simulator was run.
	</para>

	<screen>
   &lt;... Or1ksim startup messages ...&gt;

Copying Linux... Ok, booting the kernel.
****************** counters reset ******************
cycles 145321226, insn #9988651
****************** counters reset ******************
&lt;5&gt;Linux version 2.6.23-or32 (jeremy@thomas) (gcc version 3.4.4) #3 Sat Jun 28 1
9:30:06 BST 2008
Detecting Processor units:
  Signed 0x391
Setting up paging and PTEs.
write protecting ro sections (0xc0002000 - 0xc024c000)
Setting up identical mapping (0x80000000 - 0x90000000)
Setting up identical mapping (0x92000000 - 0x92002000)
Setting up identical mapping (0xb8070000 - 0xb8072000)
Setting up identical mapping (0x97000000 - 0x97002000)
Setting up identical mapping (0x99000000 - 0x9a000000)
Setting up identical mapping (0x93000000 - 0x93002000)

   &lt;... Lots more kernel messages ...&gt;

&lt;5&gt;VFS: Disk quotas dquot_6.5.1
Dquot-cache hash table entries: 2048 (order 0, 8192 bytes)
&lt;6&gt;Installing knfsd (copyright (C) 1996 okir@monad.swb.de).
&lt;6&gt;io scheduler noop registered
&lt;6&gt;io scheduler anticipatory registered (default)
&lt;6&gt;io scheduler deadline registered
&lt;6&gt;io scheduler cfq registered
&lt;6&gt;Serial: 8250/16550 driver $Revision: 1.90 $ 4 ports, IRQ sharing disabled
&lt;6&gt;serial8250.0: ttyS0 at MMIO 0x90000000 (irq = 2) is a 16550A

   &lt;... Serial I/O now working! ...&gt;

init started:  BusyBox v1.4.1 (2007-03-22 18:53:56 EST) multi-call binary
Starting pid 22, console /dev/ttyS0: '/etc/init.d/rcS'
	</screen>

      <para>
	The kernel does not lose messages, it saves them until serial I/O is
	available and then prints them, so once the 8250 is initialized,
	everything will appear on the console and on the xterm used by the
	&or1ksim; &uart;.
      </para>

      <para>
	That concludes this application note. Enjoy the tools!
      </para>

    </sect1>
  </chapter>

  <bibliography>

     <bibliomixed id="ref_gdb_ug">
      <title>
	Debugging with &gdb;: The &gnu; Source-Level Debugger,
      </title>
      <firstname>Richard</firstname> <surname>Stallman</surname>,
      <firstname>Roland</firstname> <surname>Pesch</surname>,
      <firstname>Stan</firstname> <surname>Shebbs</surname>, et al,
      issue <issuenum>9</issuenum>.
      <publisher>
	<publishername>
	  Free Software Foundation
	</publishername>
      </publisher>
      <pubdate>
	2008
      </pubdate>.
      <bibliosource class="uri">
	<ulink
	    url="http://sourceware.org/gdb/current/onlinedocs/gdb_toc.html"/>
      </bibliosource>
      <indexterm>
	<primary>&gdb;</primary>
	<secondary>User Guide</secondary>
      </indexterm>
    </bibliomixed>

    <bibliomixed id="ref_app_note_3">
      <title>
	&embecosm; Application Note 3. Howto: Porting the &gnu; Debugger:
	Practical Experience with the &or1k; Architecture.
      </title>
      <publisher>
	<publishername>
	  Embecosm Limited,
	</publishername>
      </publisher>
      <pubdate>
	August 2008.
      </pubdate>
      <indexterm>
	<primary>&gdb;</primary>
	<secondary>Howto porting guide</secondary>
      </indexterm>
      <indexterm>
	<primary>&embecosm;</primary>
	<secondary>application notes</secondary>
      </indexterm>
    </bibliomixed>

    <bibliomixed id="ref_app_note_4">
      <title>
	&embecosm; Application Note 4. Howto: &gdb; Remote Serial Protocol:
	Writing a &rsp; Server.
      </title>
      <publisher>
	<publishername>
	  Embecosm Limited,
	</publishername>
      </publisher>
      <pubdate>
	November 2008.
      </pubdate>
      <indexterm>
	<primary>&gdb;</primary>
	<secondary>Howto porting guide</secondary>
      </indexterm>
      <indexterm>
	<primary>&embecosm;</primary>
	<secondary>application notes</secondary>
      </indexterm>
    </bibliomixed>

   <bibliomixed id="ref_orpsoc">
      <title>
	&or1k;: ORPSoC
      </title>
      <firstname>Damjan</firstname> <surname>Lampret</surname> et al.
      <publisher>
	<publishername>
	  OpenCores
	</publishername>
      </publisher>
      <bibliosource class="uri">
	<ulink
	    url="http://opencores.org/projects.cgi/web/or1k/orpsoc"/>
      </bibliosource>
      <indexterm>
	<primary>Debug Unit</primary>
	<secondary>&jtag; interface</secondary>
	<tertiary>ORPSoC version</tertiary>
      </indexterm>
    </bibliomixed>

    <bibliomixed id="ref_or1k_debug">
      <title>
	SoC Debug Interface
      </title>
      <firstname>Igor</firstname> <surname>Mohor</surname>,
      issue <issuenum>3.0</issuenum>.
      <publisher>
	<publishername>
	  OpenCores
	</publishername>
      </publisher>
      <pubdate>
	14 April, 2004
      </pubdate>.
      <bibliosource class="uri">
	<ulink
	    url="http://opencores.org/cvsweb.shtml/dbg_interface/doc/DbgSupp.pdf"/>
      </bibliosource>
      <indexterm>
	<primary>Debug Unit</primary>
	<secondary>&jtag; interface</secondary>
	<tertiary>Igor Mohor version</tertiary>
      </indexterm>
    </bibliomixed>

  </bibliography>

  <index />
	
</book>
 
