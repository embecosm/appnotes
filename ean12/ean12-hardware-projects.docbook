<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" 
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [

<!-- acronyms and abbreviations -->

<!-- software applications -->
<!ENTITY bash "<application class='software'>bash</application>">
<!ENTITY CVS "<application class='software'>CVS</application>">
<!ENTITY Git "<application class='software'>Git</application>">
<!ENTITY CGEN "<application class='software'>CGEN</application>">
<!ENTITY sourceware "<application class='software'>sourceware</application>">

<!-- commands -->
<!ENTITY rsync "<application class='command'>rsync</application>">

<!-- organizations -->

<!ENTITY embecosm "Embecosm">
<!ENTITY Embecosm "Embecosm">

<!ENTITY embecosm_www "Embecosm (<ulink url='http://www.embecosm.com'>www.embecosm.com</ulink>)">

]>

<book lang="en_US">
  <title>Howto: &CVS; to &Git;</title>
  <subtitle>Efficient Multi-Module &CVS; Migration</subtitle>

  <bookinfo>
    <author>
      <firstname>Simon</firstname>
      <surname>Cook</surname>
    </author>

    <corpauthor>
      <ulink url="http://www.embecosm.com">&embecosm;</ulink>
    </corpauthor>

    <pubdate>February 2013</pubdate>
    <releaseinfo>Application Note 11. Issue 1</releaseinfo>

    <copyright>
      <year>2012</year>
      <holder>&embecosm; Limited</holder>
    </copyright>

    <legalnotice id="legalnotice">
      <title>Legal Notice</title>
      <para>
        This work is licensed under the Creative Commons Attribution 2.0 UK:
        England &amp; Wales License. To view a copy of this license, visit
        <ulink url="http://creativecommons.org/licenses/by/2.0/uk/">http://creativecommons.org/licenses/by/2.0/uk/</ulink>
        or send a letter to Creative Commons, 171 Second Street, Suite 300,
        San Francisco, California, 94105, USA.
      </para>
  
      <para>
        This license means you are free:
        <itemizedlist>
          <listitem>
            <para>to copy, distribute, display, and perform the work</para>
          </listitem>
          <listitem>
            <para>to make derivative works</para>
          </listitem>
        </itemizedlist>
        under the following conditions:
        <itemizedlist>
          <listitem>
            <para>
              <emphasis>Attribution.</emphasis> You must give the original
              author, &embecosm_www;, credit;
            </para>
          </listitem>
          <listitem>
            <para>
              For any reuse or distribution, you must make clear to others the
              license terms of this work;
            </para>
          </listitem>
          <listitem>
            <para>
              Any of these conditions can be waived if you get permission from
              the copyright holder, &embecosm;; and
            </para>
          </listitem>
          <listitem>
            <para>
              Nothing in this license impairs or restricts the author's moral
              rights.
            </para>
          </listitem>
        </itemizedlist>
      </para>

      <para>
        &embecosm; is the business name of &embecosm; Limited, a private
        limited company registered in England and Wales. Registration number
        6577021.
      </para>
    </legalnotice>
  </bookinfo>

  <chapter>
    <title>Introduction</title>
    <para>
      For many years, &CVS; has been the primary tool used by teams of
      developers on large software code bases, allowing each developer to work 
      on a single master version of the software. This tool is in continued use
      today, despite the introduction of alternatives which do not suffer from
      many of the disadvantages found in &CVS;. One such popular example is
      &Git;, a distributed versioning tool created and popularized by Linus
      Torvalds.
    </para>
    <para>
      Tools exist for migrating repositories from &CVS; to &Git;, but these can 
      suffer from issues such as being buggy and slow when used with remote
      repositories, issues with repeating path names and non-maintainability
      (once a repository has been converted, it cannot be fast-forwarded to the
      latest version). The issue of multiple modules becomes more complex when
      there are modules whose name is also a top-level directory in the source
      tree, but where the module does not consist of just that directory; some
      tools check out just the directory and others the module.
    </para>
    <para>
      This application note covers the process of migrating multiple &CVS;
      modules from a remote repository to separate &Git; repositories with
      these tools in a reliable way, whilst minimizing
      network traffic to remote &CVS; servers when extracting and converting
      multiple modules (i.e. each file is only checked out once using this
      process once regardless of the number of modules that will be converted).
      It also solves the module-directory issue by stripping down the repository
      to just the required files and then cloning the new repository in its
      entirety.
    </para>

    <sect1>
      <title>Target Audience</title>
      <para>
        This Application Note is aimed primarily at &Git; users who wish to
        import &CVS; repositories into their existing work flows and for
        developers/administrators who wish to do a permanent or continuous 
        one-way migration from &CVS; to &Git;. This note assumes basic
        familiarity with &Git; (i.e. the concept of a remote and a repository)
        but does not assume familiarity with &CVS;. This script also assumes 
        understanding of a user's preferred shell; commands written are 
        compatible with the &bash; shell but should easily be convertible to 
        another shell.
      </para>
    </sect1>

    <sect1>
      <title>Example</title>
      <para>
        An example of this system is &Embecosm;'s mirror of the &sourceware; &CVS;
        repository, mirroring the &CGEN; module as a &Git; repository. This can
        be found at <ulink url='http://www.github.com/embecosm/cgen'>http://github.com/embecosm/cgen</ulink>
        and is actively maintained via the same process described here.
        This mirror is used as an example throughout this application note.
      </para>
      <para>
        For the code examples used in this application note, the following shell
        variables should be set as follows.
      </para>
      <programlisting>
${DESTDIR} : <replaceable>destination directory for module specific &CVS; repo</replaceable>
${GITDIR}  : <replaceable>destination directory for module specific &Git; repo</replaceable>
${REPOURL} : <replaceable>URL to push the module specific &Git; repository to</replaceable>
${SRCDIR}  : <replaceable>source directory for storing initial local copy of &CVS; repo</replaceable>
      </programlisting>
    </sect1>

    <sect1>
      <title>Further information</title>
      <para>
        The main source of information regarding the use of &Git; is the &Git; documentation <xref linkend="ref_gitdoc"/>. This documentation can either be browsed on the &Git; website or is installed as man pages with the main &Git; distribution.
      </para>
      <para>
        Similarly, documentation for &CVS; <xref linkend="ref_cvsdoc" />, is also included with its distribution.
      </para>
    </sect1>

    <sect1>
      <title>About &embecosm; Application Notes</title>
      <para>
        Embecosm publishes a series of free and open source application notes,
        designed to help working engineers with practical problems.
      </para>
      <para>
        Feedback is always welcome, which should be sent to
        <email>info@embecosm.com</email>.
      </para>
    </sect1>
  </chapter>

  <chapter id="chap_clone">
    <title>Building the Embecosm Cuttlefish</title>
    <table frame='all'><title>Sample Table</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
        <colspec colname='ctext'/>
        <colspec colname='cpic'/>
        <tbody>
          <row>
            <entry>
              <para>
                Step 1: The board
              </para>
            </entry>
            <entry>No Picture</entry>
          </row>
          <row>
            <entry>
              <para>
                This is the cuttle fish board with nothing on it, you should make sure that you have yours the correct way round .
              </para>
            </entry>
            <entry>Picture</entry>
          </row>
          <row>
            <entry>
              <para>
                Step 2: Blutack
              </para>
            </entry>
            <entry>No Picture</entry>
          </row>
          <row>
            <entry>
              <para>
               When soldering your best friend is Blutack!  use it to keep components in place by sticking it on top of 
               them and then to the table.
              </para>
            </entry>
            <entry>Picture</entry>
          </row>
          <row>
            <entry>
              <para>
                Step 3: Soldering - 28 pin socket
              </para>
            </entry>
            <entry>No Picture</entry>
          </row>
          <row>
            <entry>
              <para>
               First of all you need to solder on the 28 pin socket, this goes right in the middle of the board, once you have soldered it on you can insert the Atmega chip making sure the      		       notches on the socket and on the chip are not pointing towards the pointy end of the chip.
              </para>
            </entry>
            <entry>Picture</entry>
          </row>
          <row>
            <entry>
              <para>
                step 4: Soldering - 10uf capacitor
              </para>
            </entry>
            <entry>No Picture</entry>
          </row>
          <row>
            <entry>
              <para>
              Now you need to solder on the 10uf capacitor (the one that looks like a tin can!) this one goes right at the pointy end of the cuttlefish board.
              </para>
            </entry>
            <entry>Picture</entry>
          </row>
          <row>
            <entry>
              <para>
                Step 5: Soldering - Crystal
              </para>
            </entry>
            <entry>No Picture</entry>
          </row>
          <row>
            <entry>
              <para>
              Next to solder is the 16MHz crystal, this is the next component along the board from the 10uf capacitor. sometimes it helps to put a small piece of  cardboard underneath to ensure  		      that the component does not touch the board.
              </para>
            </entry>
            <entry>Picture</entry>
          </row>
          <row>
            <entry>
              <para>
                Step 6: Soldering - Small capacitors
              </para>
            </entry>
            <entry>No Picture</entry>
          </row>
          <row>
            <entry>
              <para>
              After that comes the 22pf capacitors , they are next in line working from the pointy end of the board and they go side by side.
              </para>
            </entry>
            <entry>Picture</entry>
          </row>
          <row>
            <entry>
              <para>
                Step 7: Soldering - Big capacitors
              </para>
            </entry>
            <entry>No Picture</entry>
          </row>
          <row>
            <entry>
              <para>
              Now solder on three of the 100nf capacitors, these go in a row between the 22pf capacitors and the 28 pin socket and chip. The other 100nf capacitor needs to be soldered on right 		      next to the other end of the 28 pin socket and chip
              </para>
            </entry>
            <entry>Picture</entry>
          </row>
          <row>
            <entry>
              <para>
                Step 8: Soldering – Tactile switch
              </para>
            </entry>
            <entry>No Picture</entry>
          </row>
          <row>
            <entry>
              <para>
              Next you must solder on the 6mm tactile switch, on the board this comes straight after the 100nf capacitor in the square drawn on the board.
              </para>
            </entry>
            <entry>Picture</entry>
          </row>
          <row>
            <entry>
              <para>
                Step 9: Soldering - Resistor
              </para>
            </entry>
            <entry>No Picture</entry>
          </row>
          <row>
            <entry>
              <para>
             Now solder on the 10kohm resistor (brown black orange), if you hold your board pointy end down it goes on the right hand side of the 6mm tactile switch and 100nf capacitor.
              </para>
            </entry>
            <entry>Picture</entry>
          </row>
          <row>
            <entry>
              <para>
                Step 10: Soldering – Diode
              </para>
            </entry>
            <entry>No Picture</entry>
          </row>
          <row>
            <entry>
              <para>
             The next component to solder on is the diode, if you hold your board pointy end down it goes on the left hand side of the 6mm tactile switch and 100nf capacitor, with the thick black 		     stripe pointing upwards. The diode is one of the few components that you do need to get the correct way round.
              </para>
            </entry>
            <entry>Picture</entry>
          </row>
          <row>
            <entry>
              <para>
                Step 11: Soldering – 40 pin header
              </para>
            </entry>
            <entry>No Picture</entry>
          </row>
          <row>
            <entry>
              <para>
             Finally break the 40 pin header (using pliers or just snaping) into two sections of 16 pins and one section of six pins and you should have two spare pins left over.  The two 16 pin 		     sections need soldering on the bottom of the board one either side of the 28 pin socket and chip, so that the pins are pointing down off the bottom of the board. The six pin section 		     needs to be soldered right on the end of the board after the 6mm tactile switch.
              </para>
            </entry>
            <entry>Picture</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

      <para>
      
      </para>
      <para>

    </para>
    <para>
      There are two ways in which this can be done. The first method uses
      &rsync; (or other similar tool) to clone the repository, if such access to
      the bare repository available. Using &rsync; for this task has the
      benefit that it minimizes network traffic when updating this copy in
      the future and additionally allows directories to be omitted as required,
      for example those that will not feature in any converted repository.
    </para>
    <para>
      For this purpose, the <filename>CVSROOT</filename> directory can be
      omitted. In the authors experience, the directory is approximately half
      the size of the entire repository and is not used in any other conversion
      step, so not downloading this directory dramatically reduces the time and
      resources needed to complete the conversion.
    </para>
    <informalfigure>
      <programlisting>
rsync -az -v --delete --delete-excluded --exclude CVSROOT/** \
  sourceware.org::src-cvs/ ${SRCDIR}
      </programlisting>
    </informalfigure>
    <para>
      The second method, which can be used if bare repository access is not
      possible is to use a tool like <command>cvsclone</command> to duplicate
      the entire repository (using the module name "<filename>.</filename>" or
      the name of the repositories top level directory).
    </para>
    <note>
      <para>
        <command>cvsclone</command> is not always found in an operating
        system's software repository. For this guide, the author obtained
        a working copy of <command>cvsclone</command> from
        <ulink url="https://github.com/akavel/cvsclone">
        https://github.com/akavel/cvsclone</ulink>.
      </para>
    </note>
    <para>
      For example, to clone the &sourceware; repository, the following command
      would be used. The tool accepts two parameters, the first being the
      location of the &CVS; repository to clone (after the <function>-d</function>
      argument) and the second being the module/directory to be cloned.
    </para>
    <informalfigure>
      <programlisting>
cvsclone -d :pserver:anoncvs@sourceware.org:/cvs/src src
      </programlisting>
    </informalfigure>
    <para>
      The <function>-d</function> parameter specifies the &CVS; server to
      connect to, with <filename>src</filename> being the module to clone.
    </para>
    <note>
      <para>
        <command>cvsclone</command> takes a lot of time to complete creating
        a new clone. This is due to it checking out each version of a file
        sequentially. For large repositories it could take several days for
        the initial clone operation to complete.
      </para>
    </note>
  </chapter>

  
  <chapter>
    <title>Summary</title>
    <para>
      The following list can be used as a summary for porting a &CVS;
      repository to a set of &Git; repositories. It serves as a list of 
      functionality that any updating script should have.
    </para>
    <orderedlist>
      <listitem>
        <para>
          Clone the repository (if needed) so that there is a local copy of
          the &CVS; repository to work from (<xref linkend="chap_clone"/>).
        </para>
      </listitem>
      <listitem>
        <para>
          Split up the repository copy into separate repositories for each
          module, each of which will become &Git; repositories, utilising the
          <function>synccvs</function> function as required
          (<xref linkend="chap_split"/>).
        </para>
      </listitem>
      <listitem>
        <para>
          Convert each component to a &Git; repository using
          <command>cvsps</command> and <command>git cvs-import</command>
          and push these repositories to their respective remotes
          (<xref linkend="chap_conv"/>).
        </para>
      </listitem>
      <listitem>
        <para>
          (Optional) Set up a cron job or &CVS; post commit filter to
          automatically incorporate changes
          (<xref linkend="chap_script"/>).
        </para>
      </listitem>
    </orderedlist>
  </chapter>

  <glossary>
    <title>Glossary</title>
    <glossentry>
      <glossterm>&CVS;</glossterm>
      <glossdef>
        <para>
          (Concurrent Versions System), open source client-server
          revision control/source code management system.
        </para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>&Git;</glossterm>
      <glossdef>
        <para>
          Open source distributed revision control/source code management system
          originally developed by Linus Torvalds for the Linux kernel.
        </para>
      </glossdef>
    </glossentry>
    <glossentry>
      <glossterm>Repository</glossterm>
      <glossdef>
        <para>
          A store for source code (and other files) which maintains records of
          which files were modified at a particular time, what those changes
          were and who made them.
        </para>
      </glossdef>
    </glossentry>
  </glossary>

  <bibliography>
    <title>References</title>
    <bibliomixed id="ref_gitdoc">
      <title>&Git; Documentation</title>
      <bibliomisc>
        Available at <ulink url="http://git-scm.com/doc">http://git-scm.com/doc</ulink>.
      </bibliomisc>
    </bibliomixed>
    <bibliomixed id="ref_cvsdoc">
      <title>&CVS; Documentation</title>
      <bibliomisc>
        Available at <ulink url="http://ximbiot.com/cvs/manual">http://ximbiot.com/cvs/manual</ulink>.
      </bibliomisc>
    </bibliomixed>

  </bibliography>
</book>
